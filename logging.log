2021-05-26 21:55:18,433 open song 1
2021-05-26 21:55:21,697 subprocess.call(['ffmpeg', '-y', '-f', 'mp3', '-i', 'C:/Users/RS3/Desktop/ShazamLikeApp/Database/Songs/Group03_Song01_Full.mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2021-05-26 21:55:22,527 bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_GLOBAL(arg=0, lineno=10)
           4	LOAD_CONST(arg=1, lineno=10)
           6	LOAD_FAST(arg=2, lineno=10)
           8	CALL_FUNCTION(arg=2, lineno=10)
          10	STORE_FAST(arg=6, lineno=10)
          12	LOAD_CONST(arg=1, lineno=11)
          14	LOAD_FAST(arg=2, lineno=11)
          16	BINARY_TRUE_DIVIDE(arg=None, lineno=11)
          18	STORE_FAST(arg=7, lineno=11)
          20	LOAD_GLOBAL(arg=1, lineno=12)
          22	LOAD_FAST(arg=6, lineno=12)
          24	LOAD_FAST(arg=5, lineno=12)
          26	BINARY_MULTIPLY(arg=None, lineno=12)
          28	CALL_FUNCTION(arg=1, lineno=12)
          30	STORE_FAST(arg=8, lineno=12)
          32	LOAD_CONST(arg=2, lineno=13)
          34	STORE_FAST(arg=9, lineno=13)
          36	LOAD_CONST(arg=3, lineno=15)
          38	STORE_FAST(arg=10, lineno=15)
          40	LOAD_CONST(arg=2, lineno=16)
          42	STORE_FAST(arg=11, lineno=16)
          44	LOAD_CONST(arg=2, lineno=17)
          46	STORE_FAST(arg=12, lineno=17)
          48	LOAD_CONST(arg=3, lineno=18)
          50	STORE_FAST(arg=13, lineno=18)
          52	LOAD_CONST(arg=2, lineno=19)
          54	STORE_FAST(arg=14, lineno=19)
          56	LOAD_CONST(arg=2, lineno=20)
          58	STORE_FAST(arg=15, lineno=20)
          60	LOAD_FAST(arg=3, lineno=22)
          62	LOAD_ATTR(arg=2, lineno=22)
          64	LOAD_CONST(arg=3, lineno=22)
          66	BINARY_SUBSCR(arg=None, lineno=22)
          68	STORE_FAST(arg=16, lineno=22)
          70	LOAD_FAST(arg=0, lineno=23)
          72	LOAD_ATTR(arg=2, lineno=23)
          74	LOAD_CONST(arg=3, lineno=23)
          76	BINARY_SUBSCR(arg=None, lineno=23)
          78	STORE_FAST(arg=17, lineno=23)
          80	LOAD_FAST(arg=1, lineno=24)
          82	LOAD_ATTR(arg=2, lineno=24)
          84	LOAD_CONST(arg=3, lineno=24)
          86	BINARY_SUBSCR(arg=None, lineno=24)
          88	STORE_FAST(arg=18, lineno=24)
          90	LOAD_FAST(arg=1, lineno=25)
          92	LOAD_ATTR(arg=2, lineno=25)
          94	LOAD_CONST(arg=4, lineno=25)
          96	BINARY_SUBSCR(arg=None, lineno=25)
          98	STORE_FAST(arg=19, lineno=25)
         100	LOAD_GLOBAL(arg=3, lineno=27)
         102	LOAD_FAST(arg=18, lineno=27)
         104	CALL_FUNCTION(arg=1, lineno=27)
         106	GET_ITER(arg=None, lineno=27)
>        108	FOR_ITER(arg=344, lineno=27)
         112	STORE_FAST(arg=20, lineno=27)
         114	LOAD_GLOBAL(arg=1, lineno=29)
         116	LOAD_FAST(arg=9, lineno=29)
         118	CALL_FUNCTION(arg=1, lineno=29)
         120	STORE_FAST(arg=10, lineno=29)
         122	LOAD_FAST(arg=6, lineno=32)
         124	LOAD_FAST(arg=9, lineno=32)
         126	LOAD_FAST(arg=10, lineno=32)
         128	BINARY_SUBTRACT(arg=None, lineno=32)
         130	BINARY_MULTIPLY(arg=None, lineno=32)
         132	STORE_FAST(arg=11, lineno=32)
         134	LOAD_FAST(arg=11, lineno=35)
         136	LOAD_FAST(arg=5, lineno=35)
         138	BINARY_MULTIPLY(arg=None, lineno=35)
         140	STORE_FAST(arg=12, lineno=35)
         142	LOAD_GLOBAL(arg=1, lineno=36)
         144	LOAD_FAST(arg=12, lineno=36)
         146	CALL_FUNCTION(arg=1, lineno=36)
         148	STORE_FAST(arg=13, lineno=36)
         150	LOAD_FAST(arg=12, lineno=39)
         152	LOAD_FAST(arg=13, lineno=39)
         154	BINARY_SUBTRACT(arg=None, lineno=39)
         156	STORE_FAST(arg=14, lineno=39)
         158	LOAD_GLOBAL(arg=0, lineno=42)
         160	LOAD_FAST(arg=10, lineno=42)
         162	LOAD_CONST(arg=4, lineno=42)
         164	BINARY_ADD(arg=None, lineno=42)
         166	LOAD_FAST(arg=16, lineno=42)
         168	LOAD_FAST(arg=13, lineno=42)
         170	BINARY_SUBTRACT(arg=None, lineno=42)
         172	LOAD_FAST(arg=8, lineno=42)
         174	BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
         176	CALL_FUNCTION(arg=2, lineno=42)
         178	STORE_FAST(arg=21, lineno=42)
         180	LOAD_GLOBAL(arg=3, lineno=43)
         182	LOAD_FAST(arg=21, lineno=43)
         184	CALL_FUNCTION(arg=1, lineno=43)
         186	GET_ITER(arg=None, lineno=43)
>        188	FOR_ITER(arg=90, lineno=43)
         190	STORE_FAST(arg=22, lineno=43)
         192	LOAD_FAST(arg=3, lineno=45)
         194	LOAD_FAST(arg=13, lineno=45)
         196	LOAD_FAST(arg=22, lineno=45)
         198	LOAD_FAST(arg=8, lineno=45)
         200	BINARY_MULTIPLY(arg=None, lineno=45)
         202	BINARY_ADD(arg=None, lineno=45)
         204	BINARY_SUBSCR(arg=None, lineno=45)
         206	LOAD_FAST(arg=14, lineno=45)
         208	LOAD_FAST(arg=4, lineno=45)
         210	LOAD_FAST(arg=13, lineno=45)
         212	LOAD_FAST(arg=22, lineno=45)
         214	LOAD_FAST(arg=8, lineno=45)
         216	BINARY_MULTIPLY(arg=None, lineno=45)
         218	BINARY_ADD(arg=None, lineno=45)
         220	BINARY_SUBSCR(arg=None, lineno=45)
         222	BINARY_MULTIPLY(arg=None, lineno=45)
         224	BINARY_ADD(arg=None, lineno=45)
         226	STORE_FAST(arg=15, lineno=45)
         228	LOAD_GLOBAL(arg=3, lineno=46)
         230	LOAD_FAST(arg=19, lineno=46)
         232	CALL_FUNCTION(arg=1, lineno=46)
         234	GET_ITER(arg=None, lineno=46)
>        236	FOR_ITER(arg=40, lineno=46)
         238	STORE_FAST(arg=23, lineno=46)
         240	LOAD_FAST(arg=1, lineno=47)
         242	LOAD_FAST(arg=20, lineno=47)
         244	LOAD_FAST(arg=23, lineno=47)
         246	BUILD_TUPLE(arg=2, lineno=47)
         248	DUP_TOP_TWO(arg=None, lineno=47)
         250	BINARY_SUBSCR(arg=None, lineno=47)
         252	LOAD_FAST(arg=15, lineno=47)
         254	LOAD_FAST(arg=0, lineno=47)
         256	LOAD_FAST(arg=10, lineno=47)
         258	LOAD_FAST(arg=22, lineno=47)
         260	BINARY_SUBTRACT(arg=None, lineno=47)
         262	LOAD_FAST(arg=23, lineno=47)
         264	BUILD_TUPLE(arg=2, lineno=47)
         266	BINARY_SUBSCR(arg=None, lineno=47)
         268	BINARY_MULTIPLY(arg=None, lineno=47)
         270	INPLACE_ADD(arg=None, lineno=47)
         272	ROT_THREE(arg=None, lineno=47)
         274	STORE_SUBSCR(arg=None, lineno=47)
         276	JUMP_ABSOLUTE(arg=236, lineno=47)
>        278	JUMP_ABSOLUTE(arg=188, lineno=47)
>        280	LOAD_FAST(arg=6, lineno=50)
         282	LOAD_FAST(arg=11, lineno=50)
         284	BINARY_SUBTRACT(arg=None, lineno=50)
         286	STORE_FAST(arg=11, lineno=50)
         288	LOAD_FAST(arg=11, lineno=53)
         290	LOAD_FAST(arg=5, lineno=53)
         292	BINARY_MULTIPLY(arg=None, lineno=53)
         294	STORE_FAST(arg=12, lineno=53)
         296	LOAD_GLOBAL(arg=1, lineno=54)
         298	LOAD_FAST(arg=12, lineno=54)
         300	CALL_FUNCTION(arg=1, lineno=54)
         302	STORE_FAST(arg=13, lineno=54)
         304	LOAD_FAST(arg=12, lineno=57)
         306	LOAD_FAST(arg=13, lineno=57)
         308	BINARY_SUBTRACT(arg=None, lineno=57)
         310	STORE_FAST(arg=14, lineno=57)
         312	LOAD_GLOBAL(arg=0, lineno=60)
         314	LOAD_FAST(arg=17, lineno=60)
         316	LOAD_FAST(arg=10, lineno=60)
         318	BINARY_SUBTRACT(arg=None, lineno=60)
         320	LOAD_CONST(arg=4, lineno=60)
         322	BINARY_SUBTRACT(arg=None, lineno=60)
         324	LOAD_FAST(arg=16, lineno=60)
         326	LOAD_FAST(arg=13, lineno=60)
         328	BINARY_SUBTRACT(arg=None, lineno=60)
         330	LOAD_FAST(arg=8, lineno=60)
         332	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         334	CALL_FUNCTION(arg=2, lineno=60)
         336	STORE_FAST(arg=24, lineno=60)
         338	LOAD_GLOBAL(arg=3, lineno=61)
         340	LOAD_FAST(arg=24, lineno=61)
         342	CALL_FUNCTION(arg=1, lineno=61)
         344	GET_ITER(arg=None, lineno=61)
>        346	FOR_ITER(arg=98, lineno=61)
         348	STORE_FAST(arg=25, lineno=61)
         350	LOAD_FAST(arg=3, lineno=62)
         352	LOAD_FAST(arg=13, lineno=62)
         354	LOAD_FAST(arg=25, lineno=62)
         356	LOAD_FAST(arg=8, lineno=62)
         358	BINARY_MULTIPLY(arg=None, lineno=62)
         360	BINARY_ADD(arg=None, lineno=62)
         362	BINARY_SUBSCR(arg=None, lineno=62)
         364	LOAD_FAST(arg=14, lineno=62)
         366	LOAD_FAST(arg=4, lineno=62)
         368	LOAD_FAST(arg=13, lineno=62)
         370	LOAD_FAST(arg=25, lineno=62)
         372	LOAD_FAST(arg=8, lineno=62)
         374	BINARY_MULTIPLY(arg=None, lineno=62)
         376	BINARY_ADD(arg=None, lineno=62)
         378	BINARY_SUBSCR(arg=None, lineno=62)
         380	BINARY_MULTIPLY(arg=None, lineno=62)
         382	BINARY_ADD(arg=None, lineno=62)
         384	STORE_FAST(arg=15, lineno=62)
         386	LOAD_GLOBAL(arg=3, lineno=63)
         388	LOAD_FAST(arg=19, lineno=63)
         390	CALL_FUNCTION(arg=1, lineno=63)
         392	GET_ITER(arg=None, lineno=63)
>        394	FOR_ITER(arg=46, lineno=63)
         396	STORE_FAST(arg=23, lineno=63)
         398	LOAD_FAST(arg=1, lineno=64)
         400	LOAD_FAST(arg=20, lineno=64)
         402	LOAD_FAST(arg=23, lineno=64)
         404	BUILD_TUPLE(arg=2, lineno=64)
         406	DUP_TOP_TWO(arg=None, lineno=64)
         408	BINARY_SUBSCR(arg=None, lineno=64)
         410	LOAD_FAST(arg=15, lineno=64)
         412	LOAD_FAST(arg=0, lineno=64)
         414	LOAD_FAST(arg=10, lineno=64)
         416	LOAD_FAST(arg=25, lineno=64)
         418	BINARY_ADD(arg=None, lineno=64)
         420	LOAD_CONST(arg=4, lineno=64)
         422	BINARY_ADD(arg=None, lineno=64)
         424	LOAD_FAST(arg=23, lineno=64)
         426	BUILD_TUPLE(arg=2, lineno=64)
         428	BINARY_SUBSCR(arg=None, lineno=64)
         430	BINARY_MULTIPLY(arg=None, lineno=64)
         432	INPLACE_ADD(arg=None, lineno=64)
         434	ROT_THREE(arg=None, lineno=64)
         436	STORE_SUBSCR(arg=None, lineno=64)
         438	JUMP_ABSOLUTE(arg=394, lineno=64)
>        442	JUMP_ABSOLUTE(arg=346, lineno=64)
>        446	LOAD_FAST(arg=9, lineno=67)
         448	LOAD_FAST(arg=7, lineno=67)
         450	INPLACE_ADD(arg=None, lineno=67)
         452	STORE_FAST(arg=9, lineno=67)
         454	JUMP_ABSOLUTE(arg=108, lineno=67)
>        456	LOAD_CONST(arg=0, lineno=67)
         458	RETURN_VALUE(arg=None, lineno=67)
2021-05-26 21:55:22,527 pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-05-26 21:55:22,527 stack: []
2021-05-26 21:55:22,527 dispatch pc=0, inst=NOP(arg=None, lineno=10)
2021-05-26 21:55:22,527 stack []
2021-05-26 21:55:22,527 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=10)
2021-05-26 21:55:22,527 stack []
2021-05-26 21:55:22,527 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=10)
2021-05-26 21:55:22,527 stack ['$2load_global.0']
2021-05-26 21:55:22,528 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=10)
2021-05-26 21:55:22,528 stack ['$2load_global.0', '$const4.1']
2021-05-26 21:55:22,528 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=10)
2021-05-26 21:55:22,528 stack ['$2load_global.0', '$const4.1', '$sample_ratio6.2']
2021-05-26 21:55:22,528 dispatch pc=10, inst=STORE_FAST(arg=6, lineno=10)
2021-05-26 21:55:22,528 stack ['$8call_function.3']
2021-05-26 21:55:22,528 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=11)
2021-05-26 21:55:22,528 stack []
2021-05-26 21:55:22,528 dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=11)
2021-05-26 21:55:22,528 stack ['$const12.4']
2021-05-26 21:55:22,528 dispatch pc=16, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=11)
2021-05-26 21:55:22,528 stack ['$const12.4', '$sample_ratio14.5']
2021-05-26 21:55:22,528 dispatch pc=18, inst=STORE_FAST(arg=7, lineno=11)
2021-05-26 21:55:22,528 stack ['$16binary_true_divide.6']
2021-05-26 21:55:22,528 dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=12)
2021-05-26 21:55:22,528 stack []
2021-05-26 21:55:22,528 dispatch pc=22, inst=LOAD_FAST(arg=6, lineno=12)
2021-05-26 21:55:22,528 stack ['$20load_global.7']
2021-05-26 21:55:22,528 dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=12)
2021-05-26 21:55:22,528 stack ['$20load_global.7', '$scale22.8']
2021-05-26 21:55:22,529 dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=12)
2021-05-26 21:55:22,529 stack ['$20load_global.7', '$scale22.8', '$num_table24.9']
2021-05-26 21:55:22,529 dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=12)
2021-05-26 21:55:22,529 stack ['$20load_global.7', '$26binary_multiply.10']
2021-05-26 21:55:22,529 dispatch pc=30, inst=STORE_FAST(arg=8, lineno=12)
2021-05-26 21:55:22,529 stack ['$28call_function.11']
2021-05-26 21:55:22,529 dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=13)
2021-05-26 21:55:22,529 stack []
2021-05-26 21:55:22,529 dispatch pc=34, inst=STORE_FAST(arg=9, lineno=13)
2021-05-26 21:55:22,529 stack ['$const32.12']
2021-05-26 21:55:22,529 dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=15)
2021-05-26 21:55:22,529 stack []
2021-05-26 21:55:22,529 dispatch pc=38, inst=STORE_FAST(arg=10, lineno=15)
2021-05-26 21:55:22,529 stack ['$const36.13']
2021-05-26 21:55:22,529 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=16)
2021-05-26 21:55:22,529 stack []
2021-05-26 21:55:22,529 dispatch pc=42, inst=STORE_FAST(arg=11, lineno=16)
2021-05-26 21:55:22,529 stack ['$const40.14']
2021-05-26 21:55:22,529 dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=17)
2021-05-26 21:55:22,529 stack []
2021-05-26 21:55:22,530 dispatch pc=46, inst=STORE_FAST(arg=12, lineno=17)
2021-05-26 21:55:22,530 stack ['$const44.15']
2021-05-26 21:55:22,530 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=18)
2021-05-26 21:55:22,530 stack []
2021-05-26 21:55:22,530 dispatch pc=50, inst=STORE_FAST(arg=13, lineno=18)
2021-05-26 21:55:22,530 stack ['$const48.16']
2021-05-26 21:55:22,530 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=19)
2021-05-26 21:55:22,530 stack []
2021-05-26 21:55:22,530 dispatch pc=54, inst=STORE_FAST(arg=14, lineno=19)
2021-05-26 21:55:22,530 stack ['$const52.17']
2021-05-26 21:55:22,530 dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2021-05-26 21:55:22,530 stack []
2021-05-26 21:55:22,530 dispatch pc=58, inst=STORE_FAST(arg=15, lineno=20)
2021-05-26 21:55:22,530 stack ['$const56.18']
2021-05-26 21:55:22,530 dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=22)
2021-05-26 21:55:22,530 stack []
2021-05-26 21:55:22,530 dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=22)
2021-05-26 21:55:22,530 stack ['$interp_win60.19']
2021-05-26 21:55:22,530 dispatch pc=64, inst=LOAD_CONST(arg=3, lineno=22)
2021-05-26 21:55:22,531 stack ['$62load_attr.20']
2021-05-26 21:55:22,531 dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=22)
2021-05-26 21:55:22,531 stack ['$62load_attr.20', '$const64.21']
2021-05-26 21:55:22,531 dispatch pc=68, inst=STORE_FAST(arg=16, lineno=22)
2021-05-26 21:55:22,531 stack ['$66binary_subscr.22']
2021-05-26 21:55:22,531 dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=23)
2021-05-26 21:55:22,531 stack []
2021-05-26 21:55:22,531 dispatch pc=72, inst=LOAD_ATTR(arg=2, lineno=23)
2021-05-26 21:55:22,531 stack ['$x70.23']
2021-05-26 21:55:22,531 dispatch pc=74, inst=LOAD_CONST(arg=3, lineno=23)
2021-05-26 21:55:22,531 stack ['$72load_attr.24']
2021-05-26 21:55:22,531 dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=23)
2021-05-26 21:55:22,532 stack ['$72load_attr.24', '$const74.25']
2021-05-26 21:55:22,532 dispatch pc=78, inst=STORE_FAST(arg=17, lineno=23)
2021-05-26 21:55:22,532 stack ['$76binary_subscr.26']
2021-05-26 21:55:22,532 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=24)
2021-05-26 21:55:22,532 stack []
2021-05-26 21:55:22,532 dispatch pc=82, inst=LOAD_ATTR(arg=2, lineno=24)
2021-05-26 21:55:22,532 stack ['$y80.27']
2021-05-26 21:55:22,532 dispatch pc=84, inst=LOAD_CONST(arg=3, lineno=24)
2021-05-26 21:55:22,532 stack ['$82load_attr.28']
2021-05-26 21:55:22,532 dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=24)
2021-05-26 21:55:22,532 stack ['$82load_attr.28', '$const84.29']
2021-05-26 21:55:22,532 dispatch pc=88, inst=STORE_FAST(arg=18, lineno=24)
2021-05-26 21:55:22,532 stack ['$86binary_subscr.30']
2021-05-26 21:55:22,532 dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=25)
2021-05-26 21:55:22,532 stack []
2021-05-26 21:55:22,532 dispatch pc=92, inst=LOAD_ATTR(arg=2, lineno=25)
2021-05-26 21:55:22,532 stack ['$y90.31']
2021-05-26 21:55:22,533 dispatch pc=94, inst=LOAD_CONST(arg=4, lineno=25)
2021-05-26 21:55:22,533 stack ['$92load_attr.32']
2021-05-26 21:55:22,533 dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=25)
2021-05-26 21:55:22,533 stack ['$92load_attr.32', '$const94.33']
2021-05-26 21:55:22,533 dispatch pc=98, inst=STORE_FAST(arg=19, lineno=25)
2021-05-26 21:55:22,533 stack ['$96binary_subscr.34']
2021-05-26 21:55:22,533 dispatch pc=100, inst=LOAD_GLOBAL(arg=3, lineno=27)
2021-05-26 21:55:22,533 stack []
2021-05-26 21:55:22,533 dispatch pc=102, inst=LOAD_FAST(arg=18, lineno=27)
2021-05-26 21:55:22,533 stack ['$100load_global.35']
2021-05-26 21:55:22,533 dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=27)
2021-05-26 21:55:22,533 stack ['$100load_global.35', '$n_out102.36']
2021-05-26 21:55:22,533 dispatch pc=106, inst=GET_ITER(arg=None, lineno=27)
2021-05-26 21:55:22,533 stack ['$104call_function.37']
2021-05-26 21:55:22,533 end state. edges=[Edge(pc=108, stack=('$106get_iter.38',), blockstack=(), npush=0)]
2021-05-26 21:55:22,533 pending: deque([State(pc_initial=108 nstack_initial=1)])
2021-05-26 21:55:22,533 stack: ['$phi108.0']
2021-05-26 21:55:22,533 dispatch pc=108, inst=FOR_ITER(arg=344, lineno=27)
2021-05-26 21:55:22,533 stack ['$phi108.0']
2021-05-26 21:55:22,534 end state. edges=[Edge(pc=456, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=('$phi108.0', '$108for_iter.2'), blockstack=(), npush=0)]
2021-05-26 21:55:22,534 pending: deque([State(pc_initial=456 nstack_initial=0), State(pc_initial=112 nstack_initial=2)])
2021-05-26 21:55:22,534 stack: []
2021-05-26 21:55:22,534 dispatch pc=456, inst=LOAD_CONST(arg=0, lineno=67)
2021-05-26 21:55:22,534 stack []
2021-05-26 21:55:22,534 dispatch pc=458, inst=RETURN_VALUE(arg=None, lineno=67)
2021-05-26 21:55:22,534 stack ['$const456.0']
2021-05-26 21:55:22,534 end state. edges=[]
2021-05-26 21:55:22,534 pending: deque([State(pc_initial=112 nstack_initial=2)])
2021-05-26 21:55:22,534 stack: ['$phi112.0', '$phi112.1']
2021-05-26 21:55:22,534 dispatch pc=112, inst=STORE_FAST(arg=20, lineno=27)
2021-05-26 21:55:22,534 stack ['$phi112.0', '$phi112.1']
2021-05-26 21:55:22,534 dispatch pc=114, inst=LOAD_GLOBAL(arg=1, lineno=29)
2021-05-26 21:55:22,534 stack ['$phi112.0']
2021-05-26 21:55:22,534 dispatch pc=116, inst=LOAD_FAST(arg=9, lineno=29)
2021-05-26 21:55:22,534 stack ['$phi112.0', '$114load_global.2']
2021-05-26 21:55:22,534 dispatch pc=118, inst=CALL_FUNCTION(arg=1, lineno=29)
2021-05-26 21:55:22,534 stack ['$phi112.0', '$114load_global.2', '$time_register116.3']
2021-05-26 21:55:22,534 dispatch pc=120, inst=STORE_FAST(arg=10, lineno=29)
2021-05-26 21:55:22,534 stack ['$phi112.0', '$118call_function.4']
2021-05-26 21:55:22,534 dispatch pc=122, inst=LOAD_FAST(arg=6, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0']
2021-05-26 21:55:22,535 dispatch pc=124, inst=LOAD_FAST(arg=9, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$scale122.5']
2021-05-26 21:55:22,535 dispatch pc=126, inst=LOAD_FAST(arg=10, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$scale122.5', '$time_register124.6']
2021-05-26 21:55:22,535 dispatch pc=128, inst=BINARY_SUBTRACT(arg=None, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$scale122.5', '$time_register124.6', '$n126.7']
2021-05-26 21:55:22,535 dispatch pc=130, inst=BINARY_MULTIPLY(arg=None, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$scale122.5', '$128binary_subtract.8']
2021-05-26 21:55:22,535 dispatch pc=132, inst=STORE_FAST(arg=11, lineno=32)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$130binary_multiply.9']
2021-05-26 21:55:22,535 dispatch pc=134, inst=LOAD_FAST(arg=11, lineno=35)
2021-05-26 21:55:22,535 stack ['$phi112.0']
2021-05-26 21:55:22,535 dispatch pc=136, inst=LOAD_FAST(arg=5, lineno=35)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$frac134.10']
2021-05-26 21:55:22,535 dispatch pc=138, inst=BINARY_MULTIPLY(arg=None, lineno=35)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$frac134.10', '$num_table136.11']
2021-05-26 21:55:22,535 dispatch pc=140, inst=STORE_FAST(arg=12, lineno=35)
2021-05-26 21:55:22,535 stack ['$phi112.0', '$138binary_multiply.12']
2021-05-26 21:55:22,536 dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=36)
2021-05-26 21:55:22,536 stack ['$phi112.0']
2021-05-26 21:55:22,536 dispatch pc=144, inst=LOAD_FAST(arg=12, lineno=36)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$142load_global.13']
2021-05-26 21:55:22,536 dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=36)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$142load_global.13', '$index_frac144.14']
2021-05-26 21:55:22,536 dispatch pc=148, inst=STORE_FAST(arg=13, lineno=36)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$146call_function.15']
2021-05-26 21:55:22,536 dispatch pc=150, inst=LOAD_FAST(arg=12, lineno=39)
2021-05-26 21:55:22,536 stack ['$phi112.0']
2021-05-26 21:55:22,536 dispatch pc=152, inst=LOAD_FAST(arg=13, lineno=39)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$index_frac150.16']
2021-05-26 21:55:22,536 dispatch pc=154, inst=BINARY_SUBTRACT(arg=None, lineno=39)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$index_frac150.16', '$offset152.17']
2021-05-26 21:55:22,536 dispatch pc=156, inst=STORE_FAST(arg=14, lineno=39)
2021-05-26 21:55:22,536 stack ['$phi112.0', '$154binary_subtract.18']
2021-05-26 21:55:22,536 dispatch pc=158, inst=LOAD_GLOBAL(arg=0, lineno=42)
2021-05-26 21:55:22,536 stack ['$phi112.0']
2021-05-26 21:55:22,536 dispatch pc=160, inst=LOAD_FAST(arg=10, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19']
2021-05-26 21:55:22,537 dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$n160.20']
2021-05-26 21:55:22,537 dispatch pc=164, inst=BINARY_ADD(arg=None, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$n160.20', '$const162.21']
2021-05-26 21:55:22,537 dispatch pc=166, inst=LOAD_FAST(arg=16, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22']
2021-05-26 21:55:22,537 dispatch pc=168, inst=LOAD_FAST(arg=13, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22', '$nwin166.23']
2021-05-26 21:55:22,537 dispatch pc=170, inst=BINARY_SUBTRACT(arg=None, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22', '$nwin166.23', '$offset168.24']
2021-05-26 21:55:22,537 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22', '$170binary_subtract.25']
2021-05-26 21:55:22,537 dispatch pc=174, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22', '$170binary_subtract.25', '$index_step172.26']
2021-05-26 21:55:22,537 dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$158load_global.19', '$164binary_add.22', '$174binary_floor_divide.27']
2021-05-26 21:55:22,537 dispatch pc=178, inst=STORE_FAST(arg=21, lineno=42)
2021-05-26 21:55:22,537 stack ['$phi112.0', '$176call_function.28']
2021-05-26 21:55:22,537 dispatch pc=180, inst=LOAD_GLOBAL(arg=3, lineno=43)
2021-05-26 21:55:22,537 stack ['$phi112.0']
2021-05-26 21:55:22,538 dispatch pc=182, inst=LOAD_FAST(arg=21, lineno=43)
2021-05-26 21:55:22,538 stack ['$phi112.0', '$180load_global.29']
2021-05-26 21:55:22,538 dispatch pc=184, inst=CALL_FUNCTION(arg=1, lineno=43)
2021-05-26 21:55:22,538 stack ['$phi112.0', '$180load_global.29', '$i_max182.30']
2021-05-26 21:55:22,538 dispatch pc=186, inst=GET_ITER(arg=None, lineno=43)
2021-05-26 21:55:22,538 stack ['$phi112.0', '$184call_function.31']
2021-05-26 21:55:22,538 end state. edges=[Edge(pc=188, stack=('$phi112.0', '$186get_iter.32'), blockstack=(), npush=0)]
2021-05-26 21:55:22,538 pending: deque([State(pc_initial=188 nstack_initial=2)])
2021-05-26 21:55:22,538 stack: ['$phi188.0', '$phi188.1']
2021-05-26 21:55:22,538 dispatch pc=188, inst=FOR_ITER(arg=90, lineno=43)
2021-05-26 21:55:22,538 stack ['$phi188.0', '$phi188.1']
2021-05-26 21:55:22,538 end state. edges=[Edge(pc=280, stack=('$phi188.0',), blockstack=(), npush=0), Edge(pc=190, stack=('$phi188.0', '$phi188.1', '$188for_iter.3'), blockstack=(), npush=0)]
2021-05-26 21:55:22,538 pending: deque([State(pc_initial=280 nstack_initial=1), State(pc_initial=190 nstack_initial=3)])
2021-05-26 21:55:22,538 stack: ['$phi280.0']
2021-05-26 21:55:22,538 dispatch pc=280, inst=LOAD_FAST(arg=6, lineno=50)
2021-05-26 21:55:22,538 stack ['$phi280.0']
2021-05-26 21:55:22,538 dispatch pc=282, inst=LOAD_FAST(arg=11, lineno=50)
2021-05-26 21:55:22,538 stack ['$phi280.0', '$scale280.1']
2021-05-26 21:55:22,539 dispatch pc=284, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$scale280.1', '$frac282.2']
2021-05-26 21:55:22,539 dispatch pc=286, inst=STORE_FAST(arg=11, lineno=50)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$284binary_subtract.3']
2021-05-26 21:55:22,539 dispatch pc=288, inst=LOAD_FAST(arg=11, lineno=53)
2021-05-26 21:55:22,539 stack ['$phi280.0']
2021-05-26 21:55:22,539 dispatch pc=290, inst=LOAD_FAST(arg=5, lineno=53)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$frac288.4']
2021-05-26 21:55:22,539 dispatch pc=292, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$frac288.4', '$num_table290.5']
2021-05-26 21:55:22,539 dispatch pc=294, inst=STORE_FAST(arg=12, lineno=53)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$292binary_multiply.6']
2021-05-26 21:55:22,539 dispatch pc=296, inst=LOAD_GLOBAL(arg=1, lineno=54)
2021-05-26 21:55:22,539 stack ['$phi280.0']
2021-05-26 21:55:22,539 dispatch pc=298, inst=LOAD_FAST(arg=12, lineno=54)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$296load_global.7']
2021-05-26 21:55:22,539 dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=54)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$296load_global.7', '$index_frac298.8']
2021-05-26 21:55:22,539 dispatch pc=302, inst=STORE_FAST(arg=13, lineno=54)
2021-05-26 21:55:22,539 stack ['$phi280.0', '$300call_function.9']
2021-05-26 21:55:22,540 dispatch pc=304, inst=LOAD_FAST(arg=12, lineno=57)
2021-05-26 21:55:22,540 stack ['$phi280.0']
2021-05-26 21:55:22,540 dispatch pc=306, inst=LOAD_FAST(arg=13, lineno=57)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$index_frac304.10']
2021-05-26 21:55:22,540 dispatch pc=308, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$index_frac304.10', '$offset306.11']
2021-05-26 21:55:22,540 dispatch pc=310, inst=STORE_FAST(arg=14, lineno=57)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$308binary_subtract.12']
2021-05-26 21:55:22,540 dispatch pc=312, inst=LOAD_GLOBAL(arg=0, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0']
2021-05-26 21:55:22,540 dispatch pc=314, inst=LOAD_FAST(arg=17, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13']
2021-05-26 21:55:22,540 dispatch pc=316, inst=LOAD_FAST(arg=10, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13', '$n_orig314.14']
2021-05-26 21:55:22,540 dispatch pc=318, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13', '$n_orig314.14', '$n316.15']
2021-05-26 21:55:22,540 dispatch pc=320, inst=LOAD_CONST(arg=4, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13', '$318binary_subtract.16']
2021-05-26 21:55:22,540 dispatch pc=322, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13', '$318binary_subtract.16', '$const320.17']
2021-05-26 21:55:22,540 dispatch pc=324, inst=LOAD_FAST(arg=16, lineno=60)
2021-05-26 21:55:22,540 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18']
2021-05-26 21:55:22,541 dispatch pc=326, inst=LOAD_FAST(arg=13, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18', '$nwin324.19']
2021-05-26 21:55:22,541 dispatch pc=328, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18', '$nwin324.19', '$offset326.20']
2021-05-26 21:55:22,541 dispatch pc=330, inst=LOAD_FAST(arg=8, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18', '$328binary_subtract.21']
2021-05-26 21:55:22,541 dispatch pc=332, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18', '$328binary_subtract.21', '$index_step330.22']
2021-05-26 21:55:22,541 dispatch pc=334, inst=CALL_FUNCTION(arg=2, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$312load_global.13', '$322binary_subtract.18', '$332binary_floor_divide.23']
2021-05-26 21:55:22,541 dispatch pc=336, inst=STORE_FAST(arg=24, lineno=60)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$334call_function.24']
2021-05-26 21:55:22,541 dispatch pc=338, inst=LOAD_GLOBAL(arg=3, lineno=61)
2021-05-26 21:55:22,541 stack ['$phi280.0']
2021-05-26 21:55:22,541 dispatch pc=340, inst=LOAD_FAST(arg=24, lineno=61)
2021-05-26 21:55:22,541 stack ['$phi280.0', '$338load_global.25']
2021-05-26 21:55:22,542 dispatch pc=342, inst=CALL_FUNCTION(arg=1, lineno=61)
2021-05-26 21:55:22,542 stack ['$phi280.0', '$338load_global.25', '$k_max340.26']
2021-05-26 21:55:22,542 dispatch pc=344, inst=GET_ITER(arg=None, lineno=61)
2021-05-26 21:55:22,542 stack ['$phi280.0', '$342call_function.27']
2021-05-26 21:55:22,542 end state. edges=[Edge(pc=346, stack=('$phi280.0', '$344get_iter.28'), blockstack=(), npush=0)]
2021-05-26 21:55:22,542 pending: deque([State(pc_initial=190 nstack_initial=3), State(pc_initial=346 nstack_initial=2)])
2021-05-26 21:55:22,542 stack: ['$phi190.0', '$phi190.1', '$phi190.2']
2021-05-26 21:55:22,542 dispatch pc=190, inst=STORE_FAST(arg=22, lineno=43)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$phi190.2']
2021-05-26 21:55:22,542 dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1']
2021-05-26 21:55:22,542 dispatch pc=194, inst=LOAD_FAST(arg=13, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$interp_win192.3']
2021-05-26 21:55:22,542 dispatch pc=196, inst=LOAD_FAST(arg=22, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$interp_win192.3', '$offset194.4']
2021-05-26 21:55:22,542 dispatch pc=198, inst=LOAD_FAST(arg=8, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$interp_win192.3', '$offset194.4', '$i196.5']
2021-05-26 21:55:22,542 dispatch pc=200, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$interp_win192.3', '$offset194.4', '$i196.5', '$index_step198.6']
2021-05-26 21:55:22,542 dispatch pc=202, inst=BINARY_ADD(arg=None, lineno=45)
2021-05-26 21:55:22,542 stack ['$phi190.0', '$phi190.1', '$interp_win192.3', '$offset194.4', '$200binary_multiply.7']
2021-05-26 21:55:22,543 dispatch pc=204, inst=BINARY_SUBSCR(arg=None, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$interp_win192.3', '$202binary_add.8']
2021-05-26 21:55:22,543 dispatch pc=206, inst=LOAD_FAST(arg=14, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9']
2021-05-26 21:55:22,543 dispatch pc=208, inst=LOAD_FAST(arg=4, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10']
2021-05-26 21:55:22,543 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11']
2021-05-26 21:55:22,543 dispatch pc=212, inst=LOAD_FAST(arg=22, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11', '$offset210.12']
2021-05-26 21:55:22,543 dispatch pc=214, inst=LOAD_FAST(arg=8, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11', '$offset210.12', '$i212.13']
2021-05-26 21:55:22,543 dispatch pc=216, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11', '$offset210.12', '$i212.13', '$index_step214.14']
2021-05-26 21:55:22,543 dispatch pc=218, inst=BINARY_ADD(arg=None, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11', '$offset210.12', '$216binary_multiply.15']
2021-05-26 21:55:22,543 dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$interp_delta208.11', '$218binary_add.16']
2021-05-26 21:55:22,543 dispatch pc=222, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2021-05-26 21:55:22,543 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$eta206.10', '$220binary_subscr.17']
2021-05-26 21:55:22,544 dispatch pc=224, inst=BINARY_ADD(arg=None, lineno=45)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1', '$204binary_subscr.9', '$222binary_multiply.18']
2021-05-26 21:55:22,544 dispatch pc=226, inst=STORE_FAST(arg=15, lineno=45)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1', '$224binary_add.19']
2021-05-26 21:55:22,544 dispatch pc=228, inst=LOAD_GLOBAL(arg=3, lineno=46)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1']
2021-05-26 21:55:22,544 dispatch pc=230, inst=LOAD_FAST(arg=19, lineno=46)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1', '$228load_global.20']
2021-05-26 21:55:22,544 dispatch pc=232, inst=CALL_FUNCTION(arg=1, lineno=46)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1', '$228load_global.20', '$n_channels230.21']
2021-05-26 21:55:22,544 dispatch pc=234, inst=GET_ITER(arg=None, lineno=46)
2021-05-26 21:55:22,544 stack ['$phi190.0', '$phi190.1', '$232call_function.22']
2021-05-26 21:55:22,544 end state. edges=[Edge(pc=236, stack=('$phi190.0', '$phi190.1', '$234get_iter.23'), blockstack=(), npush=0)]
2021-05-26 21:55:22,544 pending: deque([State(pc_initial=346 nstack_initial=2), State(pc_initial=236 nstack_initial=3)])
2021-05-26 21:55:22,544 stack: ['$phi346.0', '$phi346.1']
2021-05-26 21:55:22,544 dispatch pc=346, inst=FOR_ITER(arg=98, lineno=61)
2021-05-26 21:55:22,544 stack ['$phi346.0', '$phi346.1']
2021-05-26 21:55:22,544 end state. edges=[Edge(pc=446, stack=('$phi346.0',), blockstack=(), npush=0), Edge(pc=348, stack=('$phi346.0', '$phi346.1', '$346for_iter.3'), blockstack=(), npush=0)]
2021-05-26 21:55:22,544 pending: deque([State(pc_initial=236 nstack_initial=3), State(pc_initial=446 nstack_initial=1), State(pc_initial=348 nstack_initial=3)])
2021-05-26 21:55:22,544 stack: ['$phi236.0', '$phi236.1', '$phi236.2']
2021-05-26 21:55:22,544 dispatch pc=236, inst=FOR_ITER(arg=40, lineno=46)
2021-05-26 21:55:22,545 stack ['$phi236.0', '$phi236.1', '$phi236.2']
2021-05-26 21:55:22,545 end state. edges=[Edge(pc=278, stack=('$phi236.0', '$phi236.1'), blockstack=(), npush=0), Edge(pc=238, stack=('$phi236.0', '$phi236.1', '$phi236.2', '$236for_iter.4'), blockstack=(), npush=0)]
2021-05-26 21:55:22,545 pending: deque([State(pc_initial=446 nstack_initial=1), State(pc_initial=348 nstack_initial=3), State(pc_initial=278 nstack_initial=2), State(pc_initial=238 nstack_initial=4)])
2021-05-26 21:55:22,545 stack: ['$phi446.0']
2021-05-26 21:55:22,545 dispatch pc=446, inst=LOAD_FAST(arg=9, lineno=67)
2021-05-26 21:55:22,545 stack ['$phi446.0']
2021-05-26 21:55:22,545 dispatch pc=448, inst=LOAD_FAST(arg=7, lineno=67)
2021-05-26 21:55:22,545 stack ['$phi446.0', '$time_register446.1']
2021-05-26 21:55:22,545 dispatch pc=450, inst=INPLACE_ADD(arg=None, lineno=67)
2021-05-26 21:55:22,545 stack ['$phi446.0', '$time_register446.1', '$time_increment448.2']
2021-05-26 21:55:22,545 dispatch pc=452, inst=STORE_FAST(arg=9, lineno=67)
2021-05-26 21:55:22,545 stack ['$phi446.0', '$450inplace_add.3']
2021-05-26 21:55:22,545 dispatch pc=454, inst=JUMP_ABSOLUTE(arg=108, lineno=67)
2021-05-26 21:55:22,545 stack ['$phi446.0']
2021-05-26 21:55:22,545 end state. edges=[Edge(pc=108, stack=('$phi446.0',), blockstack=(), npush=0)]
2021-05-26 21:55:22,545 pending: deque([State(pc_initial=348 nstack_initial=3), State(pc_initial=278 nstack_initial=2), State(pc_initial=238 nstack_initial=4), State(pc_initial=108 nstack_initial=1)])
2021-05-26 21:55:22,546 stack: ['$phi348.0', '$phi348.1', '$phi348.2']
2021-05-26 21:55:22,546 dispatch pc=348, inst=STORE_FAST(arg=25, lineno=61)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$phi348.2']
2021-05-26 21:55:22,546 dispatch pc=350, inst=LOAD_FAST(arg=3, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1']
2021-05-26 21:55:22,546 dispatch pc=352, inst=LOAD_FAST(arg=13, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3']
2021-05-26 21:55:22,546 dispatch pc=354, inst=LOAD_FAST(arg=25, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3', '$offset352.4']
2021-05-26 21:55:22,546 dispatch pc=356, inst=LOAD_FAST(arg=8, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3', '$offset352.4', '$k354.5']
2021-05-26 21:55:22,546 dispatch pc=358, inst=BINARY_MULTIPLY(arg=None, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3', '$offset352.4', '$k354.5', '$index_step356.6']
2021-05-26 21:55:22,546 dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3', '$offset352.4', '$358binary_multiply.7']
2021-05-26 21:55:22,546 dispatch pc=362, inst=BINARY_SUBSCR(arg=None, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$interp_win350.3', '$360binary_add.8']
2021-05-26 21:55:22,546 dispatch pc=364, inst=LOAD_FAST(arg=14, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9']
2021-05-26 21:55:22,546 dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=62)
2021-05-26 21:55:22,546 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10']
2021-05-26 21:55:22,546 dispatch pc=368, inst=LOAD_FAST(arg=13, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11']
2021-05-26 21:55:22,547 dispatch pc=370, inst=LOAD_FAST(arg=25, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11', '$offset368.12']
2021-05-26 21:55:22,547 dispatch pc=372, inst=LOAD_FAST(arg=8, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11', '$offset368.12', '$k370.13']
2021-05-26 21:55:22,547 dispatch pc=374, inst=BINARY_MULTIPLY(arg=None, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11', '$offset368.12', '$k370.13', '$index_step372.14']
2021-05-26 21:55:22,547 dispatch pc=376, inst=BINARY_ADD(arg=None, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11', '$offset368.12', '$374binary_multiply.15']
2021-05-26 21:55:22,547 dispatch pc=378, inst=BINARY_SUBSCR(arg=None, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$interp_delta366.11', '$376binary_add.16']
2021-05-26 21:55:22,547 dispatch pc=380, inst=BINARY_MULTIPLY(arg=None, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$eta364.10', '$378binary_subscr.17']
2021-05-26 21:55:22,547 dispatch pc=382, inst=BINARY_ADD(arg=None, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$362binary_subscr.9', '$380binary_multiply.18']
2021-05-26 21:55:22,547 dispatch pc=384, inst=STORE_FAST(arg=15, lineno=62)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$382binary_add.19']
2021-05-26 21:55:22,547 dispatch pc=386, inst=LOAD_GLOBAL(arg=3, lineno=63)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1']
2021-05-26 21:55:22,547 dispatch pc=388, inst=LOAD_FAST(arg=19, lineno=63)
2021-05-26 21:55:22,547 stack ['$phi348.0', '$phi348.1', '$386load_global.20']
2021-05-26 21:55:22,548 dispatch pc=390, inst=CALL_FUNCTION(arg=1, lineno=63)
2021-05-26 21:55:22,548 stack ['$phi348.0', '$phi348.1', '$386load_global.20', '$n_channels388.21']
2021-05-26 21:55:22,548 dispatch pc=392, inst=GET_ITER(arg=None, lineno=63)
2021-05-26 21:55:22,548 stack ['$phi348.0', '$phi348.1', '$390call_function.22']
2021-05-26 21:55:22,548 end state. edges=[Edge(pc=394, stack=('$phi348.0', '$phi348.1', '$392get_iter.23'), blockstack=(), npush=0)]
2021-05-26 21:55:22,548 pending: deque([State(pc_initial=278 nstack_initial=2), State(pc_initial=238 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=394 nstack_initial=3)])
2021-05-26 21:55:22,548 stack: ['$phi278.0', '$phi278.1']
2021-05-26 21:55:22,548 dispatch pc=278, inst=JUMP_ABSOLUTE(arg=188, lineno=47)
2021-05-26 21:55:22,548 stack ['$phi278.0', '$phi278.1']
2021-05-26 21:55:22,548 end state. edges=[Edge(pc=188, stack=('$phi278.0', '$phi278.1'), blockstack=(), npush=0)]
2021-05-26 21:55:22,548 pending: deque([State(pc_initial=238 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=394 nstack_initial=3), State(pc_initial=188 nstack_initial=2)])
2021-05-26 21:55:22,548 stack: ['$phi238.0', '$phi238.1', '$phi238.2', '$phi238.3']
2021-05-26 21:55:22,548 dispatch pc=238, inst=STORE_FAST(arg=23, lineno=46)
2021-05-26 21:55:22,548 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$phi238.3']
2021-05-26 21:55:22,548 dispatch pc=240, inst=LOAD_FAST(arg=1, lineno=47)
2021-05-26 21:55:22,548 stack ['$phi238.0', '$phi238.1', '$phi238.2']
2021-05-26 21:55:22,548 dispatch pc=242, inst=LOAD_FAST(arg=20, lineno=47)
2021-05-26 21:55:22,548 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4']
2021-05-26 21:55:22,548 dispatch pc=244, inst=LOAD_FAST(arg=23, lineno=47)
2021-05-26 21:55:22,548 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$t242.5']
2021-05-26 21:55:22,548 dispatch pc=246, inst=BUILD_TUPLE(arg=2, lineno=47)
2021-05-26 21:55:22,548 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$t242.5', '$j244.6']
2021-05-26 21:55:22,549 dispatch pc=248, inst=DUP_TOP_TWO(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7']
2021-05-26 21:55:22,549 dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$248dup_top_two.8', '$248dup_top_two.9']
2021-05-26 21:55:22,549 dispatch pc=252, inst=LOAD_FAST(arg=15, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10']
2021-05-26 21:55:22,549 dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11']
2021-05-26 21:55:22,549 dispatch pc=256, inst=LOAD_FAST(arg=10, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12']
2021-05-26 21:55:22,549 dispatch pc=258, inst=LOAD_FAST(arg=22, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12', '$n256.13']
2021-05-26 21:55:22,549 dispatch pc=260, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12', '$n256.13', '$i258.14']
2021-05-26 21:55:22,549 dispatch pc=262, inst=LOAD_FAST(arg=23, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12', '$260binary_subtract.15']
2021-05-26 21:55:22,549 dispatch pc=264, inst=BUILD_TUPLE(arg=2, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12', '$260binary_subtract.15', '$j262.16']
2021-05-26 21:55:22,549 dispatch pc=266, inst=BINARY_SUBSCR(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$x254.12', '$264build_tuple.17']
2021-05-26 21:55:22,549 dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$weight252.11', '$266binary_subscr.18']
2021-05-26 21:55:22,549 dispatch pc=270, inst=INPLACE_ADD(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$250binary_subscr.10', '$268binary_multiply.19']
2021-05-26 21:55:22,549 dispatch pc=272, inst=ROT_THREE(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$y240.4', '$246build_tuple.7', '$270inplace_add.20']
2021-05-26 21:55:22,549 dispatch pc=274, inst=STORE_SUBSCR(arg=None, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2', '$270inplace_add.20', '$y240.4', '$246build_tuple.7']
2021-05-26 21:55:22,549 dispatch pc=276, inst=JUMP_ABSOLUTE(arg=236, lineno=47)
2021-05-26 21:55:22,549 stack ['$phi238.0', '$phi238.1', '$phi238.2']
2021-05-26 21:55:22,549 end state. edges=[Edge(pc=236, stack=('$phi238.0', '$phi238.1', '$phi238.2'), blockstack=(), npush=0)]
2021-05-26 21:55:22,549 pending: deque([State(pc_initial=108 nstack_initial=1), State(pc_initial=394 nstack_initial=3), State(pc_initial=188 nstack_initial=2), State(pc_initial=236 nstack_initial=3)])
2021-05-26 21:55:22,549 pending: deque([State(pc_initial=394 nstack_initial=3), State(pc_initial=188 nstack_initial=2), State(pc_initial=236 nstack_initial=3)])
2021-05-26 21:55:22,549 stack: ['$phi394.0', '$phi394.1', '$phi394.2']
2021-05-26 21:55:22,549 dispatch pc=394, inst=FOR_ITER(arg=46, lineno=63)
2021-05-26 21:55:22,549 stack ['$phi394.0', '$phi394.1', '$phi394.2']
2021-05-26 21:55:22,549 end state. edges=[Edge(pc=442, stack=('$phi394.0', '$phi394.1'), blockstack=(), npush=0), Edge(pc=396, stack=('$phi394.0', '$phi394.1', '$phi394.2', '$394for_iter.4'), blockstack=(), npush=0)]
2021-05-26 21:55:22,549 pending: deque([State(pc_initial=188 nstack_initial=2), State(pc_initial=236 nstack_initial=3), State(pc_initial=442 nstack_initial=2), State(pc_initial=396 nstack_initial=4)])
2021-05-26 21:55:22,549 pending: deque([State(pc_initial=236 nstack_initial=3), State(pc_initial=442 nstack_initial=2), State(pc_initial=396 nstack_initial=4)])
2021-05-26 21:55:22,549 pending: deque([State(pc_initial=442 nstack_initial=2), State(pc_initial=396 nstack_initial=4)])
2021-05-26 21:55:22,550 stack: ['$phi442.0', '$phi442.1']
2021-05-26 21:55:22,550 dispatch pc=442, inst=JUMP_ABSOLUTE(arg=346, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi442.0', '$phi442.1']
2021-05-26 21:55:22,550 end state. edges=[Edge(pc=346, stack=('$phi442.0', '$phi442.1'), blockstack=(), npush=0)]
2021-05-26 21:55:22,550 pending: deque([State(pc_initial=396 nstack_initial=4), State(pc_initial=346 nstack_initial=2)])
2021-05-26 21:55:22,550 stack: ['$phi396.0', '$phi396.1', '$phi396.2', '$phi396.3']
2021-05-26 21:55:22,550 dispatch pc=396, inst=STORE_FAST(arg=23, lineno=63)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$phi396.3']
2021-05-26 21:55:22,550 dispatch pc=398, inst=LOAD_FAST(arg=1, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2']
2021-05-26 21:55:22,550 dispatch pc=400, inst=LOAD_FAST(arg=20, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4']
2021-05-26 21:55:22,550 dispatch pc=402, inst=LOAD_FAST(arg=23, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$t400.5']
2021-05-26 21:55:22,550 dispatch pc=404, inst=BUILD_TUPLE(arg=2, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$t400.5', '$j402.6']
2021-05-26 21:55:22,550 dispatch pc=406, inst=DUP_TOP_TWO(arg=None, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7']
2021-05-26 21:55:22,550 dispatch pc=408, inst=BINARY_SUBSCR(arg=None, lineno=64)
2021-05-26 21:55:22,550 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$406dup_top_two.8', '$406dup_top_two.9']
2021-05-26 21:55:22,551 dispatch pc=410, inst=LOAD_FAST(arg=15, lineno=64)
2021-05-26 21:55:22,551 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10']
2021-05-26 21:55:22,551 dispatch pc=412, inst=LOAD_FAST(arg=0, lineno=64)
2021-05-26 21:55:22,551 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11']
2021-05-26 21:55:22,551 dispatch pc=414, inst=LOAD_FAST(arg=10, lineno=64)
2021-05-26 21:55:22,551 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12']
2021-05-26 21:55:22,551 dispatch pc=416, inst=LOAD_FAST(arg=25, lineno=64)
2021-05-26 21:55:22,551 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$n414.13']
2021-05-26 21:55:22,551 dispatch pc=418, inst=BINARY_ADD(arg=None, lineno=64)
2021-05-26 21:55:22,551 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$n414.13', '$k416.14']
2021-05-26 21:55:22,551 dispatch pc=420, inst=LOAD_CONST(arg=4, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$418binary_add.15']
2021-05-26 21:55:22,552 dispatch pc=422, inst=BINARY_ADD(arg=None, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$418binary_add.15', '$const420.16']
2021-05-26 21:55:22,552 dispatch pc=424, inst=LOAD_FAST(arg=23, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$422binary_add.17']
2021-05-26 21:55:22,552 dispatch pc=426, inst=BUILD_TUPLE(arg=2, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$422binary_add.17', '$j424.18']
2021-05-26 21:55:22,552 dispatch pc=428, inst=BINARY_SUBSCR(arg=None, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$x412.12', '$426build_tuple.19']
2021-05-26 21:55:22,552 dispatch pc=430, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$weight410.11', '$428binary_subscr.20']
2021-05-26 21:55:22,552 dispatch pc=432, inst=INPLACE_ADD(arg=None, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$408binary_subscr.10', '$430binary_multiply.21']
2021-05-26 21:55:22,552 dispatch pc=434, inst=ROT_THREE(arg=None, lineno=64)
2021-05-26 21:55:22,552 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$y398.4', '$404build_tuple.7', '$432inplace_add.22']
2021-05-26 21:55:22,553 dispatch pc=436, inst=STORE_SUBSCR(arg=None, lineno=64)
2021-05-26 21:55:22,553 stack ['$phi396.0', '$phi396.1', '$phi396.2', '$432inplace_add.22', '$y398.4', '$404build_tuple.7']
2021-05-26 21:55:22,553 dispatch pc=438, inst=JUMP_ABSOLUTE(arg=394, lineno=64)
2021-05-26 21:55:22,553 stack ['$phi396.0', '$phi396.1', '$phi396.2']
2021-05-26 21:55:22,553 end state. edges=[Edge(pc=394, stack=('$phi396.0', '$phi396.1', '$phi396.2'), blockstack=(), npush=0)]
2021-05-26 21:55:22,553 pending: deque([State(pc_initial=346 nstack_initial=2), State(pc_initial=394 nstack_initial=3)])
2021-05-26 21:55:22,553 pending: deque([State(pc_initial=394 nstack_initial=3)])
2021-05-26 21:55:22,553 -------------------------Prune PHIs-------------------------
2021-05-26 21:55:22,553 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=1): {'$phi108.0'},
             State(pc_initial=112 nstack_initial=2): {'$phi112.1'},
             State(pc_initial=188 nstack_initial=2): {'$phi188.1'},
             State(pc_initial=190 nstack_initial=3): {'$phi190.2'},
             State(pc_initial=236 nstack_initial=3): {'$phi236.2'},
             State(pc_initial=238 nstack_initial=4): {'$phi238.3'},
             State(pc_initial=278 nstack_initial=2): set(),
             State(pc_initial=280 nstack_initial=1): set(),
             State(pc_initial=346 nstack_initial=2): {'$phi346.1'},
             State(pc_initial=348 nstack_initial=3): {'$phi348.2'},
             State(pc_initial=394 nstack_initial=3): {'$phi394.2'},
             State(pc_initial=396 nstack_initial=4): {'$phi396.3'},
             State(pc_initial=442 nstack_initial=2): set(),
             State(pc_initial=446 nstack_initial=1): set(),
             State(pc_initial=456 nstack_initial=0): set()})
2021-05-26 21:55:22,554 defmap: {'$phi108.0': State(pc_initial=0 nstack_initial=0),
 '$phi112.1': State(pc_initial=108 nstack_initial=1),
 '$phi188.1': State(pc_initial=112 nstack_initial=2),
 '$phi190.2': State(pc_initial=188 nstack_initial=2),
 '$phi236.2': State(pc_initial=190 nstack_initial=3),
 '$phi238.3': State(pc_initial=236 nstack_initial=3),
 '$phi346.1': State(pc_initial=280 nstack_initial=1),
 '$phi348.2': State(pc_initial=346 nstack_initial=2),
 '$phi394.2': State(pc_initial=348 nstack_initial=3),
 '$phi396.3': State(pc_initial=394 nstack_initial=3)}
2021-05-26 21:55:22,554 phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi446.0',
                            State(pc_initial=446 nstack_initial=1))},
             '$phi112.0': {('$phi108.0',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi112.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi188.0': {('$phi112.0',
                            State(pc_initial=112 nstack_initial=2)),
                           ('$phi278.0',
                            State(pc_initial=278 nstack_initial=2))},
             '$phi188.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2)),
                           ('$phi278.1',
                            State(pc_initial=278 nstack_initial=2))},
             '$phi190.0': {('$phi188.0',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi190.1': {('$phi188.1',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi190.2': {('$188for_iter.3',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi236.0': {('$phi190.0',
                            State(pc_initial=190 nstack_initial=3)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=4))},
             '$phi236.1': {('$phi190.1',
                            State(pc_initial=190 nstack_initial=3)),
                           ('$phi238.1',
                            State(pc_initial=238 nstack_initial=4))},
             '$phi236.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3)),
                           ('$phi238.2',
                            State(pc_initial=238 nstack_initial=4))},
             '$phi238.0': {('$phi236.0',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi238.1': {('$phi236.1',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi238.2': {('$phi236.2',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi238.3': {('$236for_iter.4',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.0': {('$phi236.0',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.1': {('$phi236.1',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi280.0': {('$phi188.0',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi346.0': {('$phi280.0',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi442.0',
                            State(pc_initial=442 nstack_initial=2))},
             '$phi346.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi442.1',
                            State(pc_initial=442 nstack_initial=2))},
             '$phi348.0': {('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi348.1': {('$phi346.1',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi348.2': {('$346for_iter.3',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi394.0': {('$phi348.0',
                            State(pc_initial=348 nstack_initial=3)),
                           ('$phi396.0',
                            State(pc_initial=396 nstack_initial=4))},
             '$phi394.1': {('$phi348.1',
                            State(pc_initial=348 nstack_initial=3)),
                           ('$phi396.1',
                            State(pc_initial=396 nstack_initial=4))},
             '$phi394.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3)),
                           ('$phi396.2',
                            State(pc_initial=396 nstack_initial=4))},
             '$phi396.0': {('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi396.1': {('$phi394.1',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi396.2': {('$phi394.2',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi396.3': {('$394for_iter.4',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.0': {('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.1': {('$phi394.1',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi446.0': {('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))}})
2021-05-26 21:55:22,556 changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi112.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi112.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi188.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2)),
                           ('$phi236.1',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi190.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi190.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2)),
                           ('$phi236.1',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi190.2': {('$188for_iter.3',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi236.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2)),
                           ('$phi236.1',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi236.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3)),
                           ('$phi236.2',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi238.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi238.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi238.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.3': {('$236for_iter.4',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi278.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi280.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=2)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi346.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi394.1',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi348.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi348.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi394.1',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi348.2': {('$346for_iter.3',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi394.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi394.1',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi394.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3)),
                           ('$phi394.2',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi396.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi396.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi396.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.3': {('$394for_iter.4',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi442.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi446.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))}})
2021-05-26 21:55:22,557 changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi112.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi112.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi188.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi190.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.2': {('$188for_iter.3',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi236.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi236.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi238.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi238.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.3': {('$236for_iter.4',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi278.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi280.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi348.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.2': {('$346for_iter.3',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi394.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi396.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi396.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.3': {('$394for_iter.4',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi442.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi446.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
2021-05-26 21:55:22,558 changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi112.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi112.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi190.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.2': {('$188for_iter.3',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi236.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi238.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi238.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.3': {('$236for_iter.4',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi280.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi348.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.2': {('$346for_iter.3',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi394.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi396.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi396.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.3': {('$394for_iter.4',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi442.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi446.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
2021-05-26 21:55:22,558 changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi112.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi112.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi190.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi190.2': {('$188for_iter.3',
                            State(pc_initial=188 nstack_initial=2))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi236.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi238.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi238.2': {('$234get_iter.23',
                            State(pc_initial=190 nstack_initial=3))},
             '$phi238.3': {('$236for_iter.4',
                            State(pc_initial=236 nstack_initial=3))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.1': {('$186get_iter.32',
                            State(pc_initial=112 nstack_initial=2))},
             '$phi280.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi348.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi348.2': {('$346for_iter.3',
                            State(pc_initial=346 nstack_initial=2))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi394.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi396.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi396.2': {('$392get_iter.23',
                            State(pc_initial=348 nstack_initial=3))},
             '$phi396.3': {('$394for_iter.4',
                            State(pc_initial=394 nstack_initial=3))},
             '$phi442.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi442.1': {('$344get_iter.28',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi446.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
2021-05-26 21:55:22,560 keep phismap: {'$phi108.0': {('$106get_iter.38', State(pc_initial=0 nstack_initial=0))},
 '$phi112.1': {('$108for_iter.2', State(pc_initial=108 nstack_initial=1))},
 '$phi188.1': {('$186get_iter.32', State(pc_initial=112 nstack_initial=2))},
 '$phi190.2': {('$188for_iter.3', State(pc_initial=188 nstack_initial=2))},
 '$phi236.2': {('$234get_iter.23', State(pc_initial=190 nstack_initial=3))},
 '$phi238.3': {('$236for_iter.4', State(pc_initial=236 nstack_initial=3))},
 '$phi346.1': {('$344get_iter.28', State(pc_initial=280 nstack_initial=1))},
 '$phi348.2': {('$346for_iter.3', State(pc_initial=346 nstack_initial=2))},
 '$phi394.2': {('$392get_iter.23', State(pc_initial=348 nstack_initial=3))},
 '$phi396.3': {('$394for_iter.4', State(pc_initial=394 nstack_initial=3))}}
2021-05-26 21:55:22,560 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi108.0': '$106get_iter.38'},
             State(pc_initial=108 nstack_initial=1): {'$phi112.1': '$108for_iter.2'},
             State(pc_initial=112 nstack_initial=2): {'$phi188.1': '$186get_iter.32'},
             State(pc_initial=188 nstack_initial=2): {'$phi190.2': '$188for_iter.3'},
             State(pc_initial=190 nstack_initial=3): {'$phi236.2': '$234get_iter.23'},
             State(pc_initial=236 nstack_initial=3): {'$phi238.3': '$236for_iter.4'},
             State(pc_initial=280 nstack_initial=1): {'$phi346.1': '$344get_iter.28'},
             State(pc_initial=346 nstack_initial=2): {'$phi348.2': '$346for_iter.3'},
             State(pc_initial=348 nstack_initial=3): {'$phi394.2': '$392get_iter.23'},
             State(pc_initial=394 nstack_initial=3): {'$phi396.3': '$394for_iter.4'}})
2021-05-26 21:55:22,560 ----------------------DONE Prune PHIs-----------------------
2021-05-26 21:55:22,561 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$sample_ratio6.2'}), (8, {'func': '$2load_global.0', 'args': ['$const4.1', '$sample_ratio6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$sample_ratio14.5'}), (16, {'lhs': '$const12.4', 'rhs': '$sample_ratio14.5', 'res': '$16binary_true_divide.6'}), (18, {'value': '$16binary_true_divide.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$scale22.8'}), (24, {'res': '$num_table24.9'}), (26, {'lhs': '$scale22.8', 'rhs': '$num_table24.9', 'res': '$26binary_multiply.10'}), (28, {'func': '$20load_global.7', 'args': ['$26binary_multiply.10'], 'res': '$28call_function.11'}), (30, {'value': '$28call_function.11'}), (32, {'res': '$const32.12'}), (34, {'value': '$const32.12'}), (36, {'res': '$const36.13'}), (38, {'value': '$const36.13'}), (40, {'res': '$const40.14'}), (42, {'value': '$const40.14'}), (44, {'res': '$const44.15'}), (46, {'value': '$const44.15'}), (48, {'res': '$const48.16'}), (50, {'value': '$const48.16'}), (52, {'res': '$const52.17'}), (54, {'value': '$const52.17'}), (56, {'res': '$const56.18'}), (58, {'value': '$const56.18'}), (60, {'res': '$interp_win60.19'}), (62, {'item': '$interp_win60.19', 'res': '$62load_attr.20'}), (64, {'res': '$const64.21'}), (66, {'index': '$const64.21', 'target': '$62load_attr.20', 'res': '$66binary_subscr.22'}), (68, {'value': '$66binary_subscr.22'}), (70, {'res': '$x70.23'}), (72, {'item': '$x70.23', 'res': '$72load_attr.24'}), (74, {'res': '$const74.25'}), (76, {'index': '$const74.25', 'target': '$72load_attr.24', 'res': '$76binary_subscr.26'}), (78, {'value': '$76binary_subscr.26'}), (80, {'res': '$y80.27'}), (82, {'item': '$y80.27', 'res': '$82load_attr.28'}), (84, {'res': '$const84.29'}), (86, {'index': '$const84.29', 'target': '$82load_attr.28', 'res': '$86binary_subscr.30'}), (88, {'value': '$86binary_subscr.30'}), (90, {'res': '$y90.31'}), (92, {'item': '$y90.31', 'res': '$92load_attr.32'}), (94, {'res': '$const94.33'}), (96, {'index': '$const94.33', 'target': '$92load_attr.32', 'res': '$96binary_subscr.34'}), (98, {'value': '$96binary_subscr.34'}), (100, {'res': '$100load_global.35'}), (102, {'res': '$n_out102.36'}), (104, {'func': '$100load_global.35', 'args': ['$n_out102.36'], 'res': '$104call_function.37'}), (106, {'value': '$104call_function.37', 'res': '$106get_iter.38'})), outgoing_phis={'$phi108.0': '$106get_iter.38'}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$106get_iter.38',)})
2021-05-26 21:55:22,561 block_infos State(pc_initial=108 nstack_initial=1):
AdaptBlockInfo(insts=((108, {'iterator': '$phi108.0', 'pair': '$108for_iter.1', 'indval': '$108for_iter.2', 'pred': '$108for_iter.3'}),), outgoing_phis={'$phi112.1': '$108for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: (), 112: ('$phi108.0', '$108for_iter.2')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=112 nstack_initial=2):
AdaptBlockInfo(insts=((112, {'value': '$phi112.1'}), (114, {'res': '$114load_global.2'}), (116, {'res': '$time_register116.3'}), (118, {'func': '$114load_global.2', 'args': ['$time_register116.3'], 'res': '$118call_function.4'}), (120, {'value': '$118call_function.4'}), (122, {'res': '$scale122.5'}), (124, {'res': '$time_register124.6'}), (126, {'res': '$n126.7'}), (128, {'lhs': '$time_register124.6', 'rhs': '$n126.7', 'res': '$128binary_subtract.8'}), (130, {'lhs': '$scale122.5', 'rhs': '$128binary_subtract.8', 'res': '$130binary_multiply.9'}), (132, {'value': '$130binary_multiply.9'}), (134, {'res': '$frac134.10'}), (136, {'res': '$num_table136.11'}), (138, {'lhs': '$frac134.10', 'rhs': '$num_table136.11', 'res': '$138binary_multiply.12'}), (140, {'value': '$138binary_multiply.12'}), (142, {'res': '$142load_global.13'}), (144, {'res': '$index_frac144.14'}), (146, {'func': '$142load_global.13', 'args': ['$index_frac144.14'], 'res': '$146call_function.15'}), (148, {'value': '$146call_function.15'}), (150, {'res': '$index_frac150.16'}), (152, {'res': '$offset152.17'}), (154, {'lhs': '$index_frac150.16', 'rhs': '$offset152.17', 'res': '$154binary_subtract.18'}), (156, {'value': '$154binary_subtract.18'}), (158, {'res': '$158load_global.19'}), (160, {'res': '$n160.20'}), (162, {'res': '$const162.21'}), (164, {'lhs': '$n160.20', 'rhs': '$const162.21', 'res': '$164binary_add.22'}), (166, {'res': '$nwin166.23'}), (168, {'res': '$offset168.24'}), (170, {'lhs': '$nwin166.23', 'rhs': '$offset168.24', 'res': '$170binary_subtract.25'}), (172, {'res': '$index_step172.26'}), (174, {'lhs': '$170binary_subtract.25', 'rhs': '$index_step172.26', 'res': '$174binary_floor_divide.27'}), (176, {'func': '$158load_global.19', 'args': ['$164binary_add.22', '$174binary_floor_divide.27'], 'res': '$176call_function.28'}), (178, {'value': '$176call_function.28'}), (180, {'res': '$180load_global.29'}), (182, {'res': '$i_max182.30'}), (184, {'func': '$180load_global.29', 'args': ['$i_max182.30'], 'res': '$184call_function.31'}), (186, {'value': '$184call_function.31', 'res': '$186get_iter.32'})), outgoing_phis={'$phi188.1': '$186get_iter.32'}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: ('$phi112.0', '$186get_iter.32')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=188 nstack_initial=2):
AdaptBlockInfo(insts=((188, {'iterator': '$phi188.1', 'pair': '$188for_iter.2', 'indval': '$188for_iter.3', 'pred': '$188for_iter.4'}),), outgoing_phis={'$phi190.2': '$188for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={280: ('$phi188.0',), 190: ('$phi188.0', '$phi188.1', '$188for_iter.3')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=190 nstack_initial=3):
AdaptBlockInfo(insts=((190, {'value': '$phi190.2'}), (192, {'res': '$interp_win192.3'}), (194, {'res': '$offset194.4'}), (196, {'res': '$i196.5'}), (198, {'res': '$index_step198.6'}), (200, {'lhs': '$i196.5', 'rhs': '$index_step198.6', 'res': '$200binary_multiply.7'}), (202, {'lhs': '$offset194.4', 'rhs': '$200binary_multiply.7', 'res': '$202binary_add.8'}), (204, {'index': '$202binary_add.8', 'target': '$interp_win192.3', 'res': '$204binary_subscr.9'}), (206, {'res': '$eta206.10'}), (208, {'res': '$interp_delta208.11'}), (210, {'res': '$offset210.12'}), (212, {'res': '$i212.13'}), (214, {'res': '$index_step214.14'}), (216, {'lhs': '$i212.13', 'rhs': '$index_step214.14', 'res': '$216binary_multiply.15'}), (218, {'lhs': '$offset210.12', 'rhs': '$216binary_multiply.15', 'res': '$218binary_add.16'}), (220, {'index': '$218binary_add.16', 'target': '$interp_delta208.11', 'res': '$220binary_subscr.17'}), (222, {'lhs': '$eta206.10', 'rhs': '$220binary_subscr.17', 'res': '$222binary_multiply.18'}), (224, {'lhs': '$204binary_subscr.9', 'rhs': '$222binary_multiply.18', 'res': '$224binary_add.19'}), (226, {'value': '$224binary_add.19'}), (228, {'res': '$228load_global.20'}), (230, {'res': '$n_channels230.21'}), (232, {'func': '$228load_global.20', 'args': ['$n_channels230.21'], 'res': '$232call_function.22'}), (234, {'value': '$232call_function.22', 'res': '$234get_iter.23'})), outgoing_phis={'$phi236.2': '$234get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: ('$phi190.0', '$phi190.1', '$234get_iter.23')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=236 nstack_initial=3):
AdaptBlockInfo(insts=((236, {'iterator': '$phi236.2', 'pair': '$236for_iter.3', 'indval': '$236for_iter.4', 'pred': '$236for_iter.5'}),), outgoing_phis={'$phi238.3': '$236for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={278: ('$phi236.0', '$phi236.1'), 238: ('$phi236.0', '$phi236.1', '$phi236.2', '$236for_iter.4')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=238 nstack_initial=4):
AdaptBlockInfo(insts=((238, {'value': '$phi238.3'}), (240, {'res': '$y240.4'}), (242, {'res': '$t242.5'}), (244, {'res': '$j244.6'}), (246, {'items': ['$t242.5', '$j244.6'], 'res': '$246build_tuple.7'}), (248, {'orig': ['$y240.4', '$246build_tuple.7'], 'duped': ['$248dup_top_two.8', '$248dup_top_two.9']}), (250, {'index': '$248dup_top_two.9', 'target': '$248dup_top_two.8', 'res': '$250binary_subscr.10'}), (252, {'res': '$weight252.11'}), (254, {'res': '$x254.12'}), (256, {'res': '$n256.13'}), (258, {'res': '$i258.14'}), (260, {'lhs': '$n256.13', 'rhs': '$i258.14', 'res': '$260binary_subtract.15'}), (262, {'res': '$j262.16'}), (264, {'items': ['$260binary_subtract.15', '$j262.16'], 'res': '$264build_tuple.17'}), (266, {'index': '$264build_tuple.17', 'target': '$x254.12', 'res': '$266binary_subscr.18'}), (268, {'lhs': '$weight252.11', 'rhs': '$266binary_subscr.18', 'res': '$268binary_multiply.19'}), (270, {'lhs': '$250binary_subscr.10', 'rhs': '$268binary_multiply.19', 'res': '$270inplace_add.20'}), (274, {'target': '$y240.4', 'index': '$246build_tuple.7', 'value': '$270inplace_add.20'}), (276, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: ('$phi238.0', '$phi238.1', '$phi238.2')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=278 nstack_initial=2):
AdaptBlockInfo(insts=((278, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: ('$phi278.0', '$phi278.1')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=280 nstack_initial=1):
AdaptBlockInfo(insts=((280, {'res': '$scale280.1'}), (282, {'res': '$frac282.2'}), (284, {'lhs': '$scale280.1', 'rhs': '$frac282.2', 'res': '$284binary_subtract.3'}), (286, {'value': '$284binary_subtract.3'}), (288, {'res': '$frac288.4'}), (290, {'res': '$num_table290.5'}), (292, {'lhs': '$frac288.4', 'rhs': '$num_table290.5', 'res': '$292binary_multiply.6'}), (294, {'value': '$292binary_multiply.6'}), (296, {'res': '$296load_global.7'}), (298, {'res': '$index_frac298.8'}), (300, {'func': '$296load_global.7', 'args': ['$index_frac298.8'], 'res': '$300call_function.9'}), (302, {'value': '$300call_function.9'}), (304, {'res': '$index_frac304.10'}), (306, {'res': '$offset306.11'}), (308, {'lhs': '$index_frac304.10', 'rhs': '$offset306.11', 'res': '$308binary_subtract.12'}), (310, {'value': '$308binary_subtract.12'}), (312, {'res': '$312load_global.13'}), (314, {'res': '$n_orig314.14'}), (316, {'res': '$n316.15'}), (318, {'lhs': '$n_orig314.14', 'rhs': '$n316.15', 'res': '$318binary_subtract.16'}), (320, {'res': '$const320.17'}), (322, {'lhs': '$318binary_subtract.16', 'rhs': '$const320.17', 'res': '$322binary_subtract.18'}), (324, {'res': '$nwin324.19'}), (326, {'res': '$offset326.20'}), (328, {'lhs': '$nwin324.19', 'rhs': '$offset326.20', 'res': '$328binary_subtract.21'}), (330, {'res': '$index_step330.22'}), (332, {'lhs': '$328binary_subtract.21', 'rhs': '$index_step330.22', 'res': '$332binary_floor_divide.23'}), (334, {'func': '$312load_global.13', 'args': ['$322binary_subtract.18', '$332binary_floor_divide.23'], 'res': '$334call_function.24'}), (336, {'value': '$334call_function.24'}), (338, {'res': '$338load_global.25'}), (340, {'res': '$k_max340.26'}), (342, {'func': '$338load_global.25', 'args': ['$k_max340.26'], 'res': '$342call_function.27'}), (344, {'value': '$342call_function.27', 'res': '$344get_iter.28'})), outgoing_phis={'$phi346.1': '$344get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={346: ('$phi280.0', '$344get_iter.28')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=346 nstack_initial=2):
AdaptBlockInfo(insts=((346, {'iterator': '$phi346.1', 'pair': '$346for_iter.2', 'indval': '$346for_iter.3', 'pred': '$346for_iter.4'}),), outgoing_phis={'$phi348.2': '$346for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={446: ('$phi346.0',), 348: ('$phi346.0', '$phi346.1', '$346for_iter.3')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=348 nstack_initial=3):
AdaptBlockInfo(insts=((348, {'value': '$phi348.2'}), (350, {'res': '$interp_win350.3'}), (352, {'res': '$offset352.4'}), (354, {'res': '$k354.5'}), (356, {'res': '$index_step356.6'}), (358, {'lhs': '$k354.5', 'rhs': '$index_step356.6', 'res': '$358binary_multiply.7'}), (360, {'lhs': '$offset352.4', 'rhs': '$358binary_multiply.7', 'res': '$360binary_add.8'}), (362, {'index': '$360binary_add.8', 'target': '$interp_win350.3', 'res': '$362binary_subscr.9'}), (364, {'res': '$eta364.10'}), (366, {'res': '$interp_delta366.11'}), (368, {'res': '$offset368.12'}), (370, {'res': '$k370.13'}), (372, {'res': '$index_step372.14'}), (374, {'lhs': '$k370.13', 'rhs': '$index_step372.14', 'res': '$374binary_multiply.15'}), (376, {'lhs': '$offset368.12', 'rhs': '$374binary_multiply.15', 'res': '$376binary_add.16'}), (378, {'index': '$376binary_add.16', 'target': '$interp_delta366.11', 'res': '$378binary_subscr.17'}), (380, {'lhs': '$eta364.10', 'rhs': '$378binary_subscr.17', 'res': '$380binary_multiply.18'}), (382, {'lhs': '$362binary_subscr.9', 'rhs': '$380binary_multiply.18', 'res': '$382binary_add.19'}), (384, {'value': '$382binary_add.19'}), (386, {'res': '$386load_global.20'}), (388, {'res': '$n_channels388.21'}), (390, {'func': '$386load_global.20', 'args': ['$n_channels388.21'], 'res': '$390call_function.22'}), (392, {'value': '$390call_function.22', 'res': '$392get_iter.23'})), outgoing_phis={'$phi394.2': '$392get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={394: ('$phi348.0', '$phi348.1', '$392get_iter.23')})
2021-05-26 21:55:22,561 block_infos State(pc_initial=394 nstack_initial=3):
AdaptBlockInfo(insts=((394, {'iterator': '$phi394.2', 'pair': '$394for_iter.3', 'indval': '$394for_iter.4', 'pred': '$394for_iter.5'}),), outgoing_phis={'$phi396.3': '$394for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={442: ('$phi394.0', '$phi394.1'), 396: ('$phi394.0', '$phi394.1', '$phi394.2', '$394for_iter.4')})
2021-05-26 21:55:22,562 block_infos State(pc_initial=396 nstack_initial=4):
AdaptBlockInfo(insts=((396, {'value': '$phi396.3'}), (398, {'res': '$y398.4'}), (400, {'res': '$t400.5'}), (402, {'res': '$j402.6'}), (404, {'items': ['$t400.5', '$j402.6'], 'res': '$404build_tuple.7'}), (406, {'orig': ['$y398.4', '$404build_tuple.7'], 'duped': ['$406dup_top_two.8', '$406dup_top_two.9']}), (408, {'index': '$406dup_top_two.9', 'target': '$406dup_top_two.8', 'res': '$408binary_subscr.10'}), (410, {'res': '$weight410.11'}), (412, {'res': '$x412.12'}), (414, {'res': '$n414.13'}), (416, {'res': '$k416.14'}), (418, {'lhs': '$n414.13', 'rhs': '$k416.14', 'res': '$418binary_add.15'}), (420, {'res': '$const420.16'}), (422, {'lhs': '$418binary_add.15', 'rhs': '$const420.16', 'res': '$422binary_add.17'}), (424, {'res': '$j424.18'}), (426, {'items': ['$422binary_add.17', '$j424.18'], 'res': '$426build_tuple.19'}), (428, {'index': '$426build_tuple.19', 'target': '$x412.12', 'res': '$428binary_subscr.20'}), (430, {'lhs': '$weight410.11', 'rhs': '$428binary_subscr.20', 'res': '$430binary_multiply.21'}), (432, {'lhs': '$408binary_subscr.10', 'rhs': '$430binary_multiply.21', 'res': '$432inplace_add.22'}), (436, {'target': '$y398.4', 'index': '$404build_tuple.7', 'value': '$432inplace_add.22'}), (438, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={394: ('$phi396.0', '$phi396.1', '$phi396.2')})
2021-05-26 21:55:22,562 block_infos State(pc_initial=442 nstack_initial=2):
AdaptBlockInfo(insts=((442, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={346: ('$phi442.0', '$phi442.1')})
2021-05-26 21:55:22,562 block_infos State(pc_initial=446 nstack_initial=1):
AdaptBlockInfo(insts=((446, {'res': '$time_register446.1'}), (448, {'res': '$time_increment448.2'}), (450, {'lhs': '$time_register446.1', 'rhs': '$time_increment448.2', 'res': '$450inplace_add.3'}), (452, {'value': '$450inplace_add.3'}), (454, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$phi446.0',)})
2021-05-26 21:55:22,562 block_infos State(pc_initial=456 nstack_initial=0):
AdaptBlockInfo(insts=((456, {'res': '$const456.0'}), (458, {'retval': '$const456.0', 'castval': '$458return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-05-26 21:55:22,567 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    sample_ratio = arg(2, name=sample_ratio) ['sample_ratio']
    interp_win = arg(3, name=interp_win)     ['interp_win']
    interp_delta = arg(4, name=interp_delta) ['interp_delta']
    num_table = arg(5, name=num_table)       ['num_table']
    $2load_global.0 = global(min: <built-in function min>) ['$2load_global.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None) ['$2load_global.0', '$const4.1', 'sample_ratio', 'scale']
    $const12.4 = const(float, 1.0)           ['$const12.4']
    time_increment = $const12.4 / sample_ratio ['$const12.4', 'sample_ratio', 'time_increment']
    $20load_global.7 = global(int: <class 'int'>) ['$20load_global.7']
    $26binary_multiply.10 = scale * num_table ['$26binary_multiply.10', 'num_table', 'scale']
    index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None) ['$20load_global.7', '$26binary_multiply.10', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $62load_attr.20 = getattr(value=interp_win, attr=shape) ['$62load_attr.20', 'interp_win']
    $const64.21 = const(int, 0)              ['$const64.21']
    nwin = getitem(value=$62load_attr.20, index=$const64.21, fn=<built-in function getitem>) ['$62load_attr.20', '$const64.21', 'nwin']
    $72load_attr.24 = getattr(value=x, attr=shape) ['$72load_attr.24', 'x']
    $const74.25 = const(int, 0)              ['$const74.25']
    n_orig = getitem(value=$72load_attr.24, index=$const74.25, fn=<built-in function getitem>) ['$72load_attr.24', '$const74.25', 'n_orig']
    $82load_attr.28 = getattr(value=y, attr=shape) ['$82load_attr.28', 'y']
    $const84.29 = const(int, 0)              ['$const84.29']
    n_out = getitem(value=$82load_attr.28, index=$const84.29, fn=<built-in function getitem>) ['$82load_attr.28', '$const84.29', 'n_out']
    $92load_attr.32 = getattr(value=y, attr=shape) ['$92load_attr.32', 'y']
    $const94.33 = const(int, 1)              ['$const94.33']
    n_channels = getitem(value=$92load_attr.32, index=$const94.33, fn=<built-in function getitem>) ['$92load_attr.32', '$const94.33', 'n_channels']
    $100load_global.35 = global(range: <class 'range'>) ['$100load_global.35']
    $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None) ['$100load_global.35', '$104call_function.37', 'n_out']
    $106get_iter.38 = getiter(value=$104call_function.37) ['$104call_function.37', '$106get_iter.38']
    $phi108.0 = $106get_iter.38              ['$106get_iter.38', '$phi108.0']
    jump 108                                 []
label 108:
    $108for_iter.1 = iternext(value=$phi108.0) ['$108for_iter.1', '$phi108.0']
    $108for_iter.2 = pair_first(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.2']
    $108for_iter.3 = pair_second(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.3']
    $phi112.1 = $108for_iter.2               ['$108for_iter.2', '$phi112.1']
    branch $108for_iter.3, 112, 456          ['$108for_iter.3']
label 112:
    t = $phi112.1                            ['$phi112.1', 't']
    $114load_global.2 = global(int: <class 'int'>) ['$114load_global.2']
    n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None) ['$114load_global.2', 'n', 'time_register']
    $128binary_subtract.8 = time_register - n ['$128binary_subtract.8', 'n', 'time_register']
    frac = scale * $128binary_subtract.8     ['$128binary_subtract.8', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $142load_global.13 = global(int: <class 'int'>) ['$142load_global.13']
    offset = call $142load_global.13(index_frac, func=$142load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None) ['$142load_global.13', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $158load_global.19 = global(min: <built-in function min>) ['$158load_global.19']
    $const162.21 = const(int, 1)             ['$const162.21']
    $164binary_add.22 = n + $const162.21     ['$164binary_add.22', '$const162.21', 'n']
    $170binary_subtract.25 = nwin - offset   ['$170binary_subtract.25', 'nwin', 'offset']
    $174binary_floor_divide.27 = $170binary_subtract.25 // index_step ['$170binary_subtract.25', '$174binary_floor_divide.27', 'index_step']
    i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None) ['$158load_global.19', '$164binary_add.22', '$174binary_floor_divide.27', 'i_max']
    $180load_global.29 = global(range: <class 'range'>) ['$180load_global.29']
    $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None) ['$180load_global.29', '$184call_function.31', 'i_max']
    $186get_iter.32 = getiter(value=$184call_function.31) ['$184call_function.31', '$186get_iter.32']
    $phi188.1 = $186get_iter.32              ['$186get_iter.32', '$phi188.1']
    jump 188                                 []
label 188:
    $188for_iter.2 = iternext(value=$phi188.1) ['$188for_iter.2', '$phi188.1']
    $188for_iter.3 = pair_first(value=$188for_iter.2) ['$188for_iter.2', '$188for_iter.3']
    $188for_iter.4 = pair_second(value=$188for_iter.2) ['$188for_iter.2', '$188for_iter.4']
    $phi190.2 = $188for_iter.3               ['$188for_iter.3', '$phi190.2']
    branch $188for_iter.4, 190, 280          ['$188for_iter.4']
label 190:
    i = $phi190.2                            ['$phi190.2', 'i']
    $200binary_multiply.7 = i * index_step   ['$200binary_multiply.7', 'i', 'index_step']
    $202binary_add.8 = offset + $200binary_multiply.7 ['$200binary_multiply.7', '$202binary_add.8', 'offset']
    $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>) ['$202binary_add.8', '$204binary_subscr.9', 'interp_win']
    $216binary_multiply.15 = i * index_step  ['$216binary_multiply.15', 'i', 'index_step']
    $218binary_add.16 = offset + $216binary_multiply.15 ['$216binary_multiply.15', '$218binary_add.16', 'offset']
    $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>) ['$218binary_add.16', '$220binary_subscr.17', 'interp_delta']
    $222binary_multiply.18 = eta * $220binary_subscr.17 ['$220binary_subscr.17', '$222binary_multiply.18', 'eta']
    weight = $204binary_subscr.9 + $222binary_multiply.18 ['$204binary_subscr.9', '$222binary_multiply.18', 'weight']
    $228load_global.20 = global(range: <class 'range'>) ['$228load_global.20']
    $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None) ['$228load_global.20', '$232call_function.22', 'n_channels']
    $234get_iter.23 = getiter(value=$232call_function.22) ['$232call_function.22', '$234get_iter.23']
    $phi236.2 = $234get_iter.23              ['$234get_iter.23', '$phi236.2']
    jump 236                                 []
label 236:
    $236for_iter.3 = iternext(value=$phi236.2) ['$236for_iter.3', '$phi236.2']
    $236for_iter.4 = pair_first(value=$236for_iter.3) ['$236for_iter.3', '$236for_iter.4']
    $236for_iter.5 = pair_second(value=$236for_iter.3) ['$236for_iter.3', '$236for_iter.5']
    $phi238.3 = $236for_iter.4               ['$236for_iter.4', '$phi238.3']
    branch $236for_iter.5, 238, 278          ['$236for_iter.5']
label 238:
    j = $phi238.3                            ['$phi238.3', 'j']
    $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$246build_tuple.7', 'j', 't']
    $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>) ['$246build_tuple.7', '$250binary_subscr.10', 'y']
    $260binary_subtract.15 = n - i           ['$260binary_subtract.15', 'i', 'n']
    $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)]) ['$260binary_subtract.15', '$264build_tuple.17', 'j']
    $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>) ['$264build_tuple.17', '$266binary_subscr.18', 'x']
    $268binary_multiply.19 = weight * $266binary_subscr.18 ['$266binary_subscr.18', '$268binary_multiply.19', 'weight']
    $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined) ['$250binary_subscr.10', '$268binary_multiply.19', '$270inplace_add.20']
    y[$246build_tuple.7] = $270inplace_add.20 ['$246build_tuple.7', '$270inplace_add.20', 'y']
    jump 236                                 []
label 278:
    jump 188                                 []
label 280:
    $284binary_subtract.3 = scale - frac     ['$284binary_subtract.3', 'frac', 'scale']
    frac = $284binary_subtract.3             ['$284binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $296load_global.7 = global(int: <class 'int'>) ['$296load_global.7']
    offset = call $296load_global.7(index_frac, func=$296load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None) ['$296load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $312load_global.13 = global(min: <built-in function min>) ['$312load_global.13']
    $318binary_subtract.16 = n_orig - n      ['$318binary_subtract.16', 'n', 'n_orig']
    $const320.17 = const(int, 1)             ['$const320.17']
    $322binary_subtract.18 = $318binary_subtract.16 - $const320.17 ['$318binary_subtract.16', '$322binary_subtract.18', '$const320.17']
    $328binary_subtract.21 = nwin - offset   ['$328binary_subtract.21', 'nwin', 'offset']
    $332binary_floor_divide.23 = $328binary_subtract.21 // index_step ['$328binary_subtract.21', '$332binary_floor_divide.23', 'index_step']
    k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None) ['$312load_global.13', '$322binary_subtract.18', '$332binary_floor_divide.23', 'k_max']
    $338load_global.25 = global(range: <class 'range'>) ['$338load_global.25']
    $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None) ['$338load_global.25', '$342call_function.27', 'k_max']
    $344get_iter.28 = getiter(value=$342call_function.27) ['$342call_function.27', '$344get_iter.28']
    $phi346.1 = $344get_iter.28              ['$344get_iter.28', '$phi346.1']
    jump 346                                 []
label 346:
    $346for_iter.2 = iternext(value=$phi346.1) ['$346for_iter.2', '$phi346.1']
    $346for_iter.3 = pair_first(value=$346for_iter.2) ['$346for_iter.2', '$346for_iter.3']
    $346for_iter.4 = pair_second(value=$346for_iter.2) ['$346for_iter.2', '$346for_iter.4']
    $phi348.2 = $346for_iter.3               ['$346for_iter.3', '$phi348.2']
    branch $346for_iter.4, 348, 446          ['$346for_iter.4']
label 348:
    k = $phi348.2                            ['$phi348.2', 'k']
    $358binary_multiply.7 = k * index_step   ['$358binary_multiply.7', 'index_step', 'k']
    $360binary_add.8 = offset + $358binary_multiply.7 ['$358binary_multiply.7', '$360binary_add.8', 'offset']
    $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>) ['$360binary_add.8', '$362binary_subscr.9', 'interp_win']
    $374binary_multiply.15 = k * index_step  ['$374binary_multiply.15', 'index_step', 'k']
    $376binary_add.16 = offset + $374binary_multiply.15 ['$374binary_multiply.15', '$376binary_add.16', 'offset']
    $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>) ['$376binary_add.16', '$378binary_subscr.17', 'interp_delta']
    $380binary_multiply.18 = eta * $378binary_subscr.17 ['$378binary_subscr.17', '$380binary_multiply.18', 'eta']
    weight = $362binary_subscr.9 + $380binary_multiply.18 ['$362binary_subscr.9', '$380binary_multiply.18', 'weight']
    $386load_global.20 = global(range: <class 'range'>) ['$386load_global.20']
    $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None) ['$386load_global.20', '$390call_function.22', 'n_channels']
    $392get_iter.23 = getiter(value=$390call_function.22) ['$390call_function.22', '$392get_iter.23']
    $phi394.2 = $392get_iter.23              ['$392get_iter.23', '$phi394.2']
    jump 394                                 []
label 394:
    $394for_iter.3 = iternext(value=$phi394.2) ['$394for_iter.3', '$phi394.2']
    $394for_iter.4 = pair_first(value=$394for_iter.3) ['$394for_iter.3', '$394for_iter.4']
    $394for_iter.5 = pair_second(value=$394for_iter.3) ['$394for_iter.3', '$394for_iter.5']
    $phi396.3 = $394for_iter.4               ['$394for_iter.4', '$phi396.3']
    branch $394for_iter.5, 396, 442          ['$394for_iter.5']
label 396:
    j = $phi396.3                            ['$phi396.3', 'j']
    $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$404build_tuple.7', 'j', 't']
    $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>) ['$404build_tuple.7', '$408binary_subscr.10', 'y']
    $418binary_add.15 = n + k                ['$418binary_add.15', 'k', 'n']
    $const420.16 = const(int, 1)             ['$const420.16']
    $422binary_add.17 = $418binary_add.15 + $const420.16 ['$418binary_add.15', '$422binary_add.17', '$const420.16']
    $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)]) ['$422binary_add.17', '$426build_tuple.19', 'j']
    $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>) ['$426build_tuple.19', '$428binary_subscr.20', 'x']
    $430binary_multiply.21 = weight * $428binary_subscr.20 ['$428binary_subscr.20', '$430binary_multiply.21', 'weight']
    $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined) ['$408binary_subscr.10', '$430binary_multiply.21', '$432inplace_add.22']
    y[$404build_tuple.7] = $432inplace_add.22 ['$404build_tuple.7', '$432inplace_add.22', 'y']
    jump 394                                 []
label 442:
    jump 346                                 []
label 446:
    $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined) ['$450inplace_add.3', 'time_increment', 'time_register']
    time_register = $450inplace_add.3        ['$450inplace_add.3', 'time_register']
    jump 108                                 []
label 456:
    $const456.0 = const(NoneType, None)      ['$const456.0']
    $458return_value.1 = cast(value=$const456.0) ['$458return_value.1', '$const456.0']
    return $458return_value.1                ['$458return_value.1']

2021-05-26 21:55:22,587 ==== SSA block analysis pass on 0
2021-05-26 21:55:22,587 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,587 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,587 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,587 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,587 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,588 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,588 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,588 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,588 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,588 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,588 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,588 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,588 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,588 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,588 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,588 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,588 on stmt: n = const(int, 0)
2021-05-26 21:55:22,588 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,588 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,588 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,588 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,588 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,588 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,589 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,589 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,589 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,589 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,589 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,589 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,589 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,589 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,589 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,589 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,589 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,589 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,589 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,589 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,589 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,589 on stmt: jump 108
2021-05-26 21:55:22,589 ==== SSA block analysis pass on 108
2021-05-26 21:55:22,590 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,590 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,590 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,590 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,590 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,590 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,590 ==== SSA block analysis pass on 112
2021-05-26 21:55:22,590 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,590 on stmt: t = $phi112.1
2021-05-26 21:55:22,590 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,590 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,590 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,590 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,590 on stmt: index_frac = frac * num_table
2021-05-26 21:55:22,590 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,590 on stmt: offset = call $142load_global.13(index_frac, func=$142load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,590 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,590 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,590 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,590 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,590 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,591 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,591 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,591 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,591 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,591 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,591 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,591 on stmt: jump 188
2021-05-26 21:55:22,591 ==== SSA block analysis pass on 188
2021-05-26 21:55:22,591 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,591 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,591 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,591 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,591 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,591 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,592 ==== SSA block analysis pass on 190
2021-05-26 21:55:22,592 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,592 on stmt: i = $phi190.2
2021-05-26 21:55:22,592 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,592 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,592 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,593 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,593 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,593 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,593 on stmt: $222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,594 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,594 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,595 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,595 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,596 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,597 on stmt: jump 236
2021-05-26 21:55:22,597 ==== SSA block analysis pass on 236
2021-05-26 21:55:22,598 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,598 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,598 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,598 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,598 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,598 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,598 ==== SSA block analysis pass on 238
2021-05-26 21:55:22,598 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,598 on stmt: j = $phi238.3
2021-05-26 21:55:22,598 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,598 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,598 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,598 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,598 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,598 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,598 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,599 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,599 on stmt: jump 236
2021-05-26 21:55:22,599 ==== SSA block analysis pass on 278
2021-05-26 21:55:22,599 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,599 on stmt: jump 188
2021-05-26 21:55:22,599 ==== SSA block analysis pass on 280
2021-05-26 21:55:22,599 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,599 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,599 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,599 on stmt: index_frac = frac * num_table
2021-05-26 21:55:22,599 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,599 on stmt: offset = call $296load_global.7(index_frac, func=$296load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,599 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,599 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,600 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,600 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,600 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,600 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,600 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,600 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,600 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,600 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,600 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,600 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,600 on stmt: jump 346
2021-05-26 21:55:22,600 ==== SSA block analysis pass on 346
2021-05-26 21:55:22,601 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,601 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,601 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,601 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,601 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,601 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,601 ==== SSA block analysis pass on 348
2021-05-26 21:55:22,601 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,601 on stmt: k = $phi348.2
2021-05-26 21:55:22,601 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,601 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,601 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,601 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,602 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,602 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,602 on stmt: $380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,602 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,602 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,602 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,602 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,602 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,602 on stmt: jump 394
2021-05-26 21:55:22,602 ==== SSA block analysis pass on 394
2021-05-26 21:55:22,602 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,602 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,602 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,602 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,602 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,602 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,602 ==== SSA block analysis pass on 396
2021-05-26 21:55:22,602 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,602 on stmt: j = $phi396.3
2021-05-26 21:55:22,602 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,603 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,603 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,603 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,603 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,603 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,603 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,603 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,603 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,603 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,603 on stmt: jump 394
2021-05-26 21:55:22,603 ==== SSA block analysis pass on 442
2021-05-26 21:55:22,603 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,603 on stmt: jump 346
2021-05-26 21:55:22,603 ==== SSA block analysis pass on 446
2021-05-26 21:55:22,604 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,604 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,604 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,604 on stmt: jump 108
2021-05-26 21:55:22,604 ==== SSA block analysis pass on 456
2021-05-26 21:55:22,604 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,604 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,604 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,604 on stmt: return $458return_value.1
2021-05-26 21:55:22,607 defs defaultdict(<class 'list'>,
            {'$100load_global.35': [<numba.core.ir.Assign object at 0x0000024E1C2C53D0>],
             '$104call_function.37': [<numba.core.ir.Assign object at 0x0000024E1C2C56D0>],
             '$106get_iter.38': [<numba.core.ir.Assign object at 0x0000024E1C2C57F0>],
             '$108for_iter.1': [<numba.core.ir.Assign object at 0x0000024E1C2BECA0>],
             '$108for_iter.2': [<numba.core.ir.Assign object at 0x0000024E1C2C14C0>],
             '$108for_iter.3': [<numba.core.ir.Assign object at 0x0000024E1C2C1E20>],
             '$114load_global.2': [<numba.core.ir.Assign object at 0x0000024E1C2C5970>],
             '$128binary_subtract.8': [<numba.core.ir.Assign object at 0x0000024E1C2C7220>],
             '$142load_global.13': [<numba.core.ir.Assign object at 0x0000024E1C2C7A30>],
             '$158load_global.19': [<numba.core.ir.Assign object at 0x0000024E1C2C93D0>],
             '$164binary_add.22': [<numba.core.ir.Assign object at 0x0000024E1C2C9820>],
             '$170binary_subtract.25': [<numba.core.ir.Assign object at 0x0000024E1C2C9BE0>],
             '$174binary_floor_divide.27': [<numba.core.ir.Assign object at 0x0000024E1C2C9E80>],
             '$180load_global.29': [<numba.core.ir.Assign object at 0x0000024E1C2CC2B0>],
             '$184call_function.31': [<numba.core.ir.Assign object at 0x0000024E1C2CC5B0>],
             '$186get_iter.32': [<numba.core.ir.Assign object at 0x0000024E1C2CC6D0>],
             '$188for_iter.2': [<numba.core.ir.Assign object at 0x0000024E1C2C75E0>],
             '$188for_iter.3': [<numba.core.ir.Assign object at 0x0000024E1C2C7880>],
             '$188for_iter.4': [<numba.core.ir.Assign object at 0x0000024E1C2C7C70>],
             '$200binary_multiply.7': [<numba.core.ir.Assign object at 0x0000024E1C2CCC40>],
             '$202binary_add.8': [<numba.core.ir.Assign object at 0x0000024E1C2CCDC0>],
             '$204binary_subscr.9': [<numba.core.ir.Assign object at 0x0000024E1C2CCF40>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x0000024E1C2BBD90>],
             '$216binary_multiply.15': [<numba.core.ir.Assign object at 0x0000024E1C2CE6A0>],
             '$218binary_add.16': [<numba.core.ir.Assign object at 0x0000024E1C2CE820>],
             '$220binary_subscr.17': [<numba.core.ir.Assign object at 0x0000024E1C2CE9A0>],
             '$222binary_multiply.18': [<numba.core.ir.Assign object at 0x0000024E1C2CEB20>],
             '$228load_global.20': [<numba.core.ir.Assign object at 0x0000024E1C2CEEB0>],
             '$232call_function.22': [<numba.core.ir.Assign object at 0x0000024E1C2D01F0>],
             '$234get_iter.23': [<numba.core.ir.Assign object at 0x0000024E1C2D0310>],
             '$236for_iter.3': [<numba.core.ir.Assign object at 0x0000024E1C2CE580>],
             '$236for_iter.4': [<numba.core.ir.Assign object at 0x0000024E1C2C7070>],
             '$236for_iter.5': [<numba.core.ir.Assign object at 0x0000024E1C2D0460>],
             '$246build_tuple.7': [<numba.core.ir.Assign object at 0x0000024E1C2D0C40>],
             '$250binary_subscr.10': [<numba.core.ir.Assign object at 0x0000024E1C2D0FA0>],
             '$260binary_subtract.15': [<numba.core.ir.Assign object at 0x0000024E1C2D35E0>],
             '$264build_tuple.17': [<numba.core.ir.Assign object at 0x0000024E1C2D3880>],
             '$266binary_subscr.18': [<numba.core.ir.Assign object at 0x0000024E1C2D3A00>],
             '$268binary_multiply.19': [<numba.core.ir.Assign object at 0x0000024E1C2D3B80>],
             '$26binary_multiply.10': [<numba.core.ir.Assign object at 0x0000024E1C2BE1C0>],
             '$270inplace_add.20': [<numba.core.ir.Assign object at 0x0000024E1C2D3D00>],
             '$284binary_subtract.3': [<numba.core.ir.Assign object at 0x0000024E1C2D7100>],
             '$296load_global.7': [<numba.core.ir.Assign object at 0x0000024E1C2D7790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000024E1C2BB190>],
             '$312load_global.13': [<numba.core.ir.Assign object at 0x0000024E1C2D9130>],
             '$318binary_subtract.16': [<numba.core.ir.Assign object at 0x0000024E1C2D9520>],
             '$322binary_subtract.18': [<numba.core.ir.Assign object at 0x0000024E1C2D9820>],
             '$328binary_subtract.21': [<numba.core.ir.Assign object at 0x0000024E1C2D9BE0>],
             '$332binary_floor_divide.23': [<numba.core.ir.Assign object at 0x0000024E1C2D9E80>],
             '$338load_global.25': [<numba.core.ir.Assign object at 0x0000024E1C2DC2B0>],
             '$342call_function.27': [<numba.core.ir.Assign object at 0x0000024E1C2DC5B0>],
             '$344get_iter.28': [<numba.core.ir.Assign object at 0x0000024E1C2DC6D0>],
             '$346for_iter.2': [<numba.core.ir.Assign object at 0x0000024E1C2D79D0>],
             '$346for_iter.3': [<numba.core.ir.Assign object at 0x0000024E1C2D7E20>],
             '$346for_iter.4': [<numba.core.ir.Assign object at 0x0000024E1C2D9400>],
             '$358binary_multiply.7': [<numba.core.ir.Assign object at 0x0000024E1C2DCE20>],
             '$360binary_add.8': [<numba.core.ir.Assign object at 0x0000024E1C2DCFA0>],
             '$362binary_subscr.9': [<numba.core.ir.Assign object at 0x0000024E1C2DE160>],
             '$374binary_multiply.15': [<numba.core.ir.Assign object at 0x0000024E1C2DE880>],
             '$376binary_add.16': [<numba.core.ir.Assign object at 0x0000024E1C2DEA00>],
             '$378binary_subscr.17': [<numba.core.ir.Assign object at 0x0000024E1C2DEB80>],
             '$380binary_multiply.18': [<numba.core.ir.Assign object at 0x0000024E1C2DED00>],
             '$386load_global.20': [<numba.core.ir.Assign object at 0x0000024E1C2E00D0>],
             '$390call_function.22': [<numba.core.ir.Assign object at 0x0000024E1C2E03D0>],
             '$392get_iter.23': [<numba.core.ir.Assign object at 0x0000024E1C2E04F0>],
             '$394for_iter.3': [<numba.core.ir.Assign object at 0x0000024E1C2DE760>],
             '$394for_iter.4': [<numba.core.ir.Assign object at 0x0000024E1C2E01F0>],
             '$394for_iter.5': [<numba.core.ir.Assign object at 0x0000024E1C2E0640>],
             '$404build_tuple.7': [<numba.core.ir.Assign object at 0x0000024E1C2E0DC0>],
             '$408binary_subscr.10': [<numba.core.ir.Assign object at 0x0000024E1C2E2160>],
             '$418binary_add.15': [<numba.core.ir.Assign object at 0x0000024E1C2E2760>],
             '$422binary_add.17': [<numba.core.ir.Assign object at 0x0000024E1C2E2A60>],
             '$426build_tuple.19': [<numba.core.ir.Assign object at 0x0000024E1C2E2D00>],
             '$428binary_subscr.20': [<numba.core.ir.Assign object at 0x0000024E1C2E2E80>],
             '$430binary_multiply.21': [<numba.core.ir.Assign object at 0x0000024E1C2E4040>],
             '$432inplace_add.22': [<numba.core.ir.Assign object at 0x0000024E1C2E41C0>],
             '$450inplace_add.3': [<numba.core.ir.Assign object at 0x0000024E1C2E4580>],
             '$458return_value.1': [<numba.core.ir.Assign object at 0x0000024E1C2E49D0>],
             '$62load_attr.20': [<numba.core.ir.Assign object at 0x0000024E1C2C1970>],
             '$72load_attr.24': [<numba.core.ir.Assign object at 0x0000024E1C2C3070>],
             '$82load_attr.28': [<numba.core.ir.Assign object at 0x0000024E1C2C3730>],
             '$92load_attr.32': [<numba.core.ir.Assign object at 0x0000024E1C2C3DF0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000024E1C2BB850>],
             '$const162.21': [<numba.core.ir.Assign object at 0x0000024E1C2C9670>],
             '$const320.17': [<numba.core.ir.Assign object at 0x0000024E1C2D9670>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024E1C2BB310>],
             '$const420.16': [<numba.core.ir.Assign object at 0x0000024E1C2E28B0>],
             '$const456.0': [<numba.core.ir.Assign object at 0x0000024E1C2E4850>],
             '$const64.21': [<numba.core.ir.Assign object at 0x0000024E1C2C1AF0>],
             '$const74.25': [<numba.core.ir.Assign object at 0x0000024E1C2C31F0>],
             '$const84.29': [<numba.core.ir.Assign object at 0x0000024E1C2C38B0>],
             '$const94.33': [<numba.core.ir.Assign object at 0x0000024E1C2C3F70>],
             '$phi108.0': [<numba.core.ir.Assign object at 0x0000024E1C2BB4C0>],
             '$phi112.1': [<numba.core.ir.Assign object at 0x0000024E1C2BE760>],
             '$phi188.1': [<numba.core.ir.Assign object at 0x0000024E1C2C5B20>],
             '$phi190.2': [<numba.core.ir.Assign object at 0x0000024E1C2C74C0>],
             '$phi236.2': [<numba.core.ir.Assign object at 0x0000024E1C2CC7C0>],
             '$phi238.3': [<numba.core.ir.Assign object at 0x0000024E1C2CE340>],
             '$phi346.1': [<numba.core.ir.Assign object at 0x0000024E1C2D36D0>],
             '$phi348.2': [<numba.core.ir.Assign object at 0x0000024E1C2D7940>],
             '$phi394.2': [<numba.core.ir.Assign object at 0x0000024E1C2DC9A0>],
             '$phi396.3': [<numba.core.ir.Assign object at 0x0000024E1C2DE520>],
             'eta': [<numba.core.ir.Assign object at 0x0000024E1C2C1310>,
                     <numba.core.ir.Assign object at 0x0000024E1C2C91C0>,
                     <numba.core.ir.Assign object at 0x0000024E1C2D7EE0>],
             'frac': [<numba.core.ir.Assign object at 0x0000024E1C2BEAF0>,
                      <numba.core.ir.Assign object at 0x0000024E1C2C73A0>,
                      <numba.core.ir.Assign object at 0x0000024E1C2D71C0>],
             'i': [<numba.core.ir.Assign object at 0x0000024E1C2C9CD0>],
             'i_max': [<numba.core.ir.Assign object at 0x0000024E1C2CC070>],
             'index_frac': [<numba.core.ir.Assign object at 0x0000024E1C2BED90>,
                            <numba.core.ir.Assign object at 0x0000024E1C2C7820>,
                            <numba.core.ir.Assign object at 0x0000024E1C2D7580>],
             'index_step': [<numba.core.ir.Assign object at 0x0000024E1C2BE370>],
             'interp_delta': [<numba.core.ir.Assign object at 0x0000024E1C27C1C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x0000024E1C27CC10>],
             'j': [<numba.core.ir.Assign object at 0x0000024E1C2D0730>,
                   <numba.core.ir.Assign object at 0x0000024E1C2E08E0>],
             'k': [<numba.core.ir.Assign object at 0x0000024E1C2DC7F0>],
             'k_max': [<numba.core.ir.Assign object at 0x0000024E1C2DC070>],
             'n': [<numba.core.ir.Assign object at 0x0000024E1C2BE850>,
                   <numba.core.ir.Assign object at 0x0000024E1C2C5C70>],
             'n_channels': [<numba.core.ir.Assign object at 0x0000024E1C267760>],
             'n_orig': [<numba.core.ir.Assign object at 0x0000024E1C267370>],
             'n_out': [<numba.core.ir.Assign object at 0x0000024E1C2678E0>],
             'num_table': [<numba.core.ir.Assign object at 0x0000024E1C27CF70>],
             'nwin': [<numba.core.ir.Assign object at 0x0000024E1C267E50>],
             'offset': [<numba.core.ir.Assign object at 0x0000024E1C2C1070>,
                        <numba.core.ir.Assign object at 0x0000024E1C2C7D30>,
                        <numba.core.ir.Assign object at 0x0000024E1C2D7A90>],
             'sample_ratio': [<numba.core.ir.Assign object at 0x0000024E1C27C220>],
             'scale': [<numba.core.ir.Assign object at 0x0000024E1C2BB610>],
             't': [<numba.core.ir.Assign object at 0x0000024E1C2C52E0>],
             'time_increment': [<numba.core.ir.Assign object at 0x0000024E1C2BBB20>],
             'time_register': [<numba.core.ir.Assign object at 0x0000024E1C2BE5B0>,
                               <numba.core.ir.Assign object at 0x0000024E1C2E4640>],
             'weight': [<numba.core.ir.Assign object at 0x0000024E1C2C15B0>,
                        <numba.core.ir.Assign object at 0x0000024E1C2CECA0>,
                        <numba.core.ir.Assign object at 0x0000024E1C2DEE80>],
             'x': [<numba.core.ir.Assign object at 0x0000024E1C27CD90>],
             'y': [<numba.core.ir.Assign object at 0x0000024E1C27CFA0>]})
2021-05-26 21:55:22,608 SSA violators {'index_frac', 'eta', 'weight', 'time_register', 'frac', 'j', 'offset', 'n'}
2021-05-26 21:55:22,608 Fix SSA violator on var index_frac
2021-05-26 21:55:22,608 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,608 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,608 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,608 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,608 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,608 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,608 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,608 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,608 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,608 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,608 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,608 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,608 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,608 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,608 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,608 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,609 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,609 on stmt: n = const(int, 0)
2021-05-26 21:55:22,609 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,609 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,609 first assign: index_frac
2021-05-26 21:55:22,609 replaced with: index_frac = const(float, 0.0)
2021-05-26 21:55:22,609 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,609 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,609 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,609 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,609 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,609 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,609 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,609 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,609 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,609 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,609 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,609 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,609 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,609 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,609 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,609 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,610 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,610 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,610 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,610 on stmt: jump 108
2021-05-26 21:55:22,610 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,610 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,610 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,610 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,610 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,610 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,610 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,610 on stmt: t = $phi112.1
2021-05-26 21:55:22,610 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,610 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,610 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,610 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,610 on stmt: index_frac = frac * num_table
2021-05-26 21:55:22,610 replaced with: index_frac.1 = frac * num_table
2021-05-26 21:55:22,610 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,610 on stmt: offset = call $142load_global.13(index_frac, func=$142load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,611 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,611 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,611 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,611 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,611 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,611 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,611 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,611 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,611 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,611 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,611 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,611 on stmt: jump 188
2021-05-26 21:55:22,611 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,611 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,611 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,611 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,612 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,612 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,612 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,612 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,612 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,612 on stmt: i = $phi190.2
2021-05-26 21:55:22,612 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,612 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,612 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,612 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,612 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,612 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,612 on stmt: $222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,612 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,612 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,613 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,613 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,613 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,613 on stmt: jump 236
2021-05-26 21:55:22,613 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,613 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,613 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,613 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,613 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,613 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,613 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,613 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,613 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,613 on stmt: j = $phi238.3
2021-05-26 21:55:22,613 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,613 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,613 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,613 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,613 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,613 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,614 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,614 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,614 on stmt: jump 236
2021-05-26 21:55:22,614 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,614 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,614 on stmt: jump 188
2021-05-26 21:55:22,614 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,614 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,614 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,614 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,614 on stmt: index_frac = frac * num_table
2021-05-26 21:55:22,614 replaced with: index_frac.2 = frac * num_table
2021-05-26 21:55:22,614 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,614 on stmt: offset = call $296load_global.7(index_frac, func=$296load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,614 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,614 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,614 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,614 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,614 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,614 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,614 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,614 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,615 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,615 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,615 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,615 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,615 on stmt: jump 346
2021-05-26 21:55:22,615 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,615 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,615 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,615 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,615 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,615 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,615 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,615 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,615 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,615 on stmt: k = $phi348.2
2021-05-26 21:55:22,615 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,615 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,615 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,616 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,616 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,616 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,616 on stmt: $380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,616 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,616 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,616 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,616 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,616 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,616 on stmt: jump 394
2021-05-26 21:55:22,616 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,616 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,616 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,616 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,616 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,616 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,616 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,616 on stmt: j = $phi396.3
2021-05-26 21:55:22,616 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,616 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,616 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,617 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,617 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,617 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,617 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,617 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,617 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,617 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,617 on stmt: jump 394
2021-05-26 21:55:22,617 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,617 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,617 on stmt: jump 346
2021-05-26 21:55:22,617 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,617 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,617 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,617 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,617 on stmt: jump 108
2021-05-26 21:55:22,617 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,617 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C27CCA0>
2021-05-26 21:55:22,617 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,618 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,618 on stmt: return $458return_value.1
2021-05-26 21:55:22,618 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C267C70>],
             112: [<numba.core.ir.Assign object at 0x0000024E1C267580>],
             280: [<numba.core.ir.Assign object at 0x0000024E1C2E4C70>]})
2021-05-26 21:55:22,618 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,618 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,618 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,618 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,618 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,618 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,618 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,618 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,618 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,618 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,618 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,619 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,619 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,619 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,619 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,619 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,619 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,619 on stmt: n = const(int, 0)
2021-05-26 21:55:22,619 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,619 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,619 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,619 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,619 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,619 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,619 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,619 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,619 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,619 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,619 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,619 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,619 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,620 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,620 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,620 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,620 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,620 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,620 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,620 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,620 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,620 on stmt: jump 108
2021-05-26 21:55:22,620 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,620 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,620 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,620 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,620 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,620 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,620 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,620 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,621 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,621 on stmt: t = $phi112.1
2021-05-26 21:55:22,621 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,621 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,621 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,621 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,621 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,621 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,621 on stmt: offset = call $142load_global.13(index_frac, func=$142load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,621 find_def var='index_frac' stmt=offset = call $142load_global.13(index_frac, func=$142load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,621 replaced with: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,621 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,621 find_def var='index_frac' stmt=eta = index_frac - offset
2021-05-26 21:55:22,621 replaced with: eta = index_frac.1 - offset
2021-05-26 21:55:22,621 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,621 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,621 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,621 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,622 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,622 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,622 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,622 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,622 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,622 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,622 on stmt: jump 188
2021-05-26 21:55:22,622 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,622 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,622 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,622 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,622 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,622 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,622 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,622 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,622 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,622 on stmt: i = $phi190.2
2021-05-26 21:55:22,622 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,622 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,622 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,623 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,623 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,623 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,623 on stmt: $222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,623 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,623 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,623 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,623 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,623 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,623 on stmt: jump 236
2021-05-26 21:55:22,623 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,623 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,623 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,623 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,623 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,623 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,623 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,623 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,623 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,624 on stmt: j = $phi238.3
2021-05-26 21:55:22,624 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,624 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,624 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,624 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,624 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,624 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,624 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,624 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,624 on stmt: jump 236
2021-05-26 21:55:22,624 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,624 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,624 on stmt: jump 188
2021-05-26 21:55:22,624 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,624 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,624 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,624 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,624 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,624 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,624 on stmt: offset = call $296load_global.7(index_frac, func=$296load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,625 find_def var='index_frac' stmt=offset = call $296load_global.7(index_frac, func=$296load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
2021-05-26 21:55:22,625 replaced with: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,625 on stmt: eta = index_frac - offset
2021-05-26 21:55:22,625 find_def var='index_frac' stmt=eta = index_frac - offset
2021-05-26 21:55:22,625 replaced with: eta = index_frac.2 - offset
2021-05-26 21:55:22,625 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,625 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,625 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,625 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,625 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,625 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,625 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,625 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,625 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,626 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,626 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,626 on stmt: jump 346
2021-05-26 21:55:22,626 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,626 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,626 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,626 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,626 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,626 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,626 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,626 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,626 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,626 on stmt: k = $phi348.2
2021-05-26 21:55:22,626 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,626 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,626 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,626 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,626 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,626 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,626 on stmt: $380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,626 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,627 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,627 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,627 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,627 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,627 on stmt: jump 394
2021-05-26 21:55:22,627 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,627 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,627 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,627 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,627 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,627 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,627 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,627 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,627 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,627 on stmt: j = $phi396.3
2021-05-26 21:55:22,627 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,627 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,627 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,627 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,627 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,627 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,628 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,628 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,628 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,628 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,628 on stmt: jump 394
2021-05-26 21:55:22,628 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,628 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,628 on stmt: jump 346
2021-05-26 21:55:22,628 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,628 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,628 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,628 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,628 on stmt: jump 108
2021-05-26 21:55:22,628 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,628 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4E20>
2021-05-26 21:55:22,628 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,628 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,628 on stmt: return $458return_value.1
2021-05-26 21:55:22,628 Fix SSA violator on var eta
2021-05-26 21:55:22,628 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,628 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,628 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,629 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,629 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,629 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,629 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,629 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,629 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,629 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,629 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,629 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,629 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,629 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,629 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,629 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,629 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,629 on stmt: n = const(int, 0)
2021-05-26 21:55:22,629 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,629 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,629 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,629 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,629 first assign: eta
2021-05-26 21:55:22,629 replaced with: eta = const(float, 0.0)
2021-05-26 21:55:22,629 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,629 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,630 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,630 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,630 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,630 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,630 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,630 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,630 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,630 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,630 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,630 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,630 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,630 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,630 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,630 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,630 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,630 on stmt: jump 108
2021-05-26 21:55:22,630 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,630 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,630 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,630 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,630 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,630 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,630 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,631 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,631 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,631 on stmt: t = $phi112.1
2021-05-26 21:55:22,631 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,631 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,631 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,631 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,631 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,631 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,631 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,631 on stmt: eta = index_frac.1 - offset
2021-05-26 21:55:22,631 replaced with: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,631 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,631 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,631 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,631 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,632 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,632 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,632 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,632 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,632 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,632 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,632 on stmt: jump 188
2021-05-26 21:55:22,632 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,632 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,632 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,632 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,632 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,632 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,632 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,632 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,633 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,633 on stmt: i = $phi190.2
2021-05-26 21:55:22,633 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,633 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,633 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,633 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,633 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,633 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,633 on stmt: $222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,634 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,634 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,634 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,634 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,634 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,634 on stmt: jump 236
2021-05-26 21:55:22,634 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,634 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,634 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,634 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,635 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,635 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,635 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,635 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,635 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,635 on stmt: j = $phi238.3
2021-05-26 21:55:22,635 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,635 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,635 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,636 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,636 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,636 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,636 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,636 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,636 on stmt: jump 236
2021-05-26 21:55:22,636 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,636 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,636 on stmt: jump 188
2021-05-26 21:55:22,636 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,636 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,637 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,637 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,637 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,637 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,637 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,637 on stmt: eta = index_frac.2 - offset
2021-05-26 21:55:22,637 replaced with: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,637 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,637 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,637 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,637 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,637 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,637 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,637 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,638 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,638 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,638 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,638 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,638 on stmt: jump 346
2021-05-26 21:55:22,638 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,638 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,638 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,638 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,638 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,638 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,638 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,638 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,638 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,638 on stmt: k = $phi348.2
2021-05-26 21:55:22,639 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,639 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,639 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,639 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,639 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,639 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,639 on stmt: $380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,639 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,639 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,640 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,642 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,642 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,642 on stmt: jump 394
2021-05-26 21:55:22,642 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,643 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,643 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,643 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,643 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,643 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,643 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,643 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,643 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,643 on stmt: j = $phi396.3
2021-05-26 21:55:22,644 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,644 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,644 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,644 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,644 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,644 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,644 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,644 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,645 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,645 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,645 on stmt: jump 394
2021-05-26 21:55:22,645 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,645 on stmt: jump 346
2021-05-26 21:55:22,645 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,645 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,645 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,645 on stmt: jump 108
2021-05-26 21:55:22,646 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,646 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,646 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,646 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,646 on stmt: return $458return_value.1
2021-05-26 21:55:22,646 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C267B50>],
             112: [<numba.core.ir.Assign object at 0x0000024E1C27CCA0>],
             280: [<numba.core.ir.Assign object at 0x0000024E1C2E4EB0>]})
2021-05-26 21:55:22,647 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,647 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,647 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,647 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,647 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,647 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,647 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,647 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,647 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,647 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,647 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,647 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,647 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,647 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,647 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,647 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,648 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,648 on stmt: n = const(int, 0)
2021-05-26 21:55:22,648 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,648 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,648 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,648 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,648 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,648 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,648 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,648 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,648 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,648 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,648 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,648 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,648 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,648 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,648 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,648 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,648 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,649 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,649 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,649 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,649 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,649 on stmt: jump 108
2021-05-26 21:55:22,649 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,649 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,649 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,649 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,649 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,649 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,649 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,649 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,649 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,649 on stmt: t = $phi112.1
2021-05-26 21:55:22,650 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,650 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,650 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,650 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,650 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,650 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,650 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,650 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,650 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,650 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,650 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,650 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,651 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,651 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,651 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,651 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,651 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,651 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,651 on stmt: jump 188
2021-05-26 21:55:22,651 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,651 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,651 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,651 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,652 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,652 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,652 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,652 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,652 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,652 on stmt: i = $phi190.2
2021-05-26 21:55:22,652 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,652 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,652 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,652 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,653 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,653 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,653 on stmt: $222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,653 find_def var='eta' stmt=$222binary_multiply.18 = eta * $220binary_subscr.17
2021-05-26 21:55:22,653 find_def_from_top label 190
2021-05-26 21:55:22,653 idom 188 from label 190
2021-05-26 21:55:22,653 find_def_from_bottom label 188
2021-05-26 21:55:22,653 find_def_from_top label 188
2021-05-26 21:55:22,653 idom 112 from label 188
2021-05-26 21:55:22,653 find_def_from_bottom label 112
2021-05-26 21:55:22,653 replaced with: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,653 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,654 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,654 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,654 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,654 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,654 on stmt: jump 236
2021-05-26 21:55:22,654 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,654 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,654 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,654 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,654 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,655 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,655 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,655 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,655 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,655 on stmt: j = $phi238.3
2021-05-26 21:55:22,655 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,655 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,655 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,655 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,655 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,655 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,655 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,655 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,656 on stmt: jump 236
2021-05-26 21:55:22,656 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,656 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,656 on stmt: jump 188
2021-05-26 21:55:22,656 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,656 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,656 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,656 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,656 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,656 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,656 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,656 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,656 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,656 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,656 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,656 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,657 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,657 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,657 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,657 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,657 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,657 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,657 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,657 on stmt: jump 346
2021-05-26 21:55:22,657 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,657 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,657 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,657 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,657 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,657 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,657 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,657 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,657 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,657 on stmt: k = $phi348.2
2021-05-26 21:55:22,657 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,658 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,658 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,658 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,658 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,658 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,658 on stmt: $380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,658 find_def var='eta' stmt=$380binary_multiply.18 = eta * $378binary_subscr.17
2021-05-26 21:55:22,658 find_def_from_top label 348
2021-05-26 21:55:22,658 idom 346 from label 348
2021-05-26 21:55:22,658 find_def_from_bottom label 346
2021-05-26 21:55:22,658 find_def_from_top label 346
2021-05-26 21:55:22,658 idom 280 from label 346
2021-05-26 21:55:22,658 find_def_from_bottom label 280
2021-05-26 21:55:22,658 replaced with: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,658 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,659 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,659 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,659 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,659 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,659 on stmt: jump 394
2021-05-26 21:55:22,659 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,659 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,659 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,659 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,659 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,659 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,659 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,659 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,660 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,660 on stmt: j = $phi396.3
2021-05-26 21:55:22,660 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,660 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,660 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,660 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,660 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,660 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,660 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,660 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,660 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,660 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,660 on stmt: jump 394
2021-05-26 21:55:22,660 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,660 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,660 on stmt: jump 346
2021-05-26 21:55:22,660 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,661 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,661 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,661 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,661 on stmt: jump 108
2021-05-26 21:55:22,661 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,661 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C2E4DF0>
2021-05-26 21:55:22,661 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,661 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,661 on stmt: return $458return_value.1
2021-05-26 21:55:22,661 Fix SSA violator on var weight
2021-05-26 21:55:22,661 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,661 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,661 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,661 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,661 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,661 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,661 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,661 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,661 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,661 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,661 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,661 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,662 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,662 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,662 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,662 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,662 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,662 on stmt: n = const(int, 0)
2021-05-26 21:55:22,662 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,662 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,662 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,662 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,662 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,662 first assign: weight
2021-05-26 21:55:22,662 replaced with: weight = const(float, 0.0)
2021-05-26 21:55:22,662 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,662 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,662 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,662 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,662 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,662 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,662 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,662 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,662 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,662 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,663 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,663 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,663 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,663 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,663 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,663 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,663 on stmt: jump 108
2021-05-26 21:55:22,663 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,663 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,663 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,663 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,663 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,663 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,663 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,663 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,663 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,663 on stmt: t = $phi112.1
2021-05-26 21:55:22,663 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,663 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,663 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,663 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,663 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,663 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,664 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,664 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,664 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,664 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,664 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,664 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,664 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,664 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,664 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,664 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,664 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,664 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,664 on stmt: jump 188
2021-05-26 21:55:22,664 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,664 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,664 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,665 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,665 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,665 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,665 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,665 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,665 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,665 on stmt: i = $phi190.2
2021-05-26 21:55:22,665 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,665 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,665 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,665 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,665 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,665 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,665 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,665 on stmt: weight = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,665 replaced with: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,665 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,665 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,666 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,666 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,666 on stmt: jump 236
2021-05-26 21:55:22,666 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,666 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,666 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,666 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,666 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,666 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,666 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,666 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,666 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,666 on stmt: j = $phi238.3
2021-05-26 21:55:22,666 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,666 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,666 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,666 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,666 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,666 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,666 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,666 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,666 on stmt: jump 236
2021-05-26 21:55:22,667 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,667 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,667 on stmt: jump 188
2021-05-26 21:55:22,667 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,667 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,667 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,667 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,667 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,667 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,667 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,667 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,667 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,667 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,667 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,667 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,667 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,667 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,667 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,667 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,667 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,667 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,667 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,668 on stmt: jump 346
2021-05-26 21:55:22,668 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,668 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,668 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,668 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,668 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,668 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,668 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,668 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,668 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,668 on stmt: k = $phi348.2
2021-05-26 21:55:22,668 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,668 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,668 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,668 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,668 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,668 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,668 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,668 on stmt: weight = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,668 replaced with: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,668 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,668 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,668 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,669 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,669 on stmt: jump 394
2021-05-26 21:55:22,669 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,669 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,669 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,669 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,669 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,669 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,669 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,669 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,669 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,669 on stmt: j = $phi396.3
2021-05-26 21:55:22,669 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,669 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,669 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,669 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,669 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,669 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,669 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,669 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,669 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,669 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,669 on stmt: jump 394
2021-05-26 21:55:22,670 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,670 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,670 on stmt: jump 346
2021-05-26 21:55:22,670 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,670 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,670 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,670 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,670 on stmt: jump 108
2021-05-26 21:55:22,670 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,670 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C311D60>
2021-05-26 21:55:22,670 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,670 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,670 on stmt: return $458return_value.1
2021-05-26 21:55:22,670 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C311CD0>],
             190: [<numba.core.ir.Assign object at 0x0000024E1C267400>],
             348: [<numba.core.ir.Assign object at 0x0000024E1C2E4D90>]})
2021-05-26 21:55:22,670 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,670 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,671 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,671 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,671 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,671 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,671 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,671 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,671 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,671 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,671 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,671 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,671 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,671 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,671 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,671 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,671 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,671 on stmt: n = const(int, 0)
2021-05-26 21:55:22,671 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,671 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,671 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,672 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,672 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,672 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,672 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,672 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,672 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,672 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,672 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,672 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,672 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,672 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,672 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,672 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,672 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,673 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,673 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,673 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,673 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,673 on stmt: jump 108
2021-05-26 21:55:22,673 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,673 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,673 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,673 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,673 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,673 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,673 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,673 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,673 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,673 on stmt: t = $phi112.1
2021-05-26 21:55:22,673 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,673 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,673 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,673 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,673 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,673 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,674 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,674 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,674 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,674 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,674 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,674 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,674 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,674 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,674 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,674 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,674 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,674 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,674 on stmt: jump 188
2021-05-26 21:55:22,674 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,674 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,674 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,674 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,675 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,675 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,675 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,675 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,675 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,675 on stmt: i = $phi190.2
2021-05-26 21:55:22,675 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,675 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,675 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,675 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,675 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,675 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,675 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,676 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,676 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,676 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,676 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,676 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,676 on stmt: jump 236
2021-05-26 21:55:22,676 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,676 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,676 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,676 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,676 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,676 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,676 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,676 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,676 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,676 on stmt: j = $phi238.3
2021-05-26 21:55:22,676 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,676 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,676 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,676 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,676 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,677 on stmt: $268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,677 find_def var='weight' stmt=$268binary_multiply.19 = weight * $266binary_subscr.18
2021-05-26 21:55:22,677 find_def_from_top label 238
2021-05-26 21:55:22,677 idom 236 from label 238
2021-05-26 21:55:22,677 find_def_from_bottom label 236
2021-05-26 21:55:22,677 find_def_from_top label 236
2021-05-26 21:55:22,677 idom 190 from label 236
2021-05-26 21:55:22,677 find_def_from_bottom label 190
2021-05-26 21:55:22,677 replaced with: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,677 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,677 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,677 on stmt: jump 236
2021-05-26 21:55:22,677 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,677 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,677 on stmt: jump 188
2021-05-26 21:55:22,677 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,677 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,677 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,677 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,677 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,677 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,678 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,678 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,678 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,678 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,678 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,678 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,678 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,678 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,678 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,678 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,678 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,678 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,678 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,678 on stmt: jump 346
2021-05-26 21:55:22,678 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,678 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,678 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,678 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,678 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,678 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,679 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,679 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,679 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,679 on stmt: k = $phi348.2
2021-05-26 21:55:22,679 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,679 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,679 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,679 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,679 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,679 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,679 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,679 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,679 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,679 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,679 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,679 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,679 on stmt: jump 394
2021-05-26 21:55:22,679 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,679 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,679 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,679 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,680 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,680 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,680 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,680 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,680 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,680 on stmt: j = $phi396.3
2021-05-26 21:55:22,680 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,680 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,680 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,680 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,680 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,681 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,681 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,681 on stmt: $430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,681 find_def var='weight' stmt=$430binary_multiply.21 = weight * $428binary_subscr.20
2021-05-26 21:55:22,681 find_def_from_top label 396
2021-05-26 21:55:22,681 idom 394 from label 396
2021-05-26 21:55:22,681 find_def_from_bottom label 394
2021-05-26 21:55:22,681 find_def_from_top label 394
2021-05-26 21:55:22,681 idom 348 from label 394
2021-05-26 21:55:22,681 find_def_from_bottom label 348
2021-05-26 21:55:22,681 replaced with: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,681 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,681 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,681 on stmt: jump 394
2021-05-26 21:55:22,682 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,682 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,682 on stmt: jump 346
2021-05-26 21:55:22,682 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,682 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,682 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,682 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,682 on stmt: jump 108
2021-05-26 21:55:22,682 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,682 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311FA0>
2021-05-26 21:55:22,682 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,682 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,682 on stmt: return $458return_value.1
2021-05-26 21:55:22,682 Fix SSA violator on var time_register
2021-05-26 21:55:22,682 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,682 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,682 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,682 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,682 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,682 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,682 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,682 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,683 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,683 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,683 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,683 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,683 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,683 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,683 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,683 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,683 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,683 first assign: time_register
2021-05-26 21:55:22,683 replaced with: time_register = const(float, 0.0)
2021-05-26 21:55:22,683 on stmt: n = const(int, 0)
2021-05-26 21:55:22,683 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,683 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,683 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,683 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,683 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,683 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,683 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,683 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,683 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,683 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,683 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,684 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,684 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,684 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,684 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,684 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,684 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,684 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,684 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,684 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,684 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,684 on stmt: jump 108
2021-05-26 21:55:22,684 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,684 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,684 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,684 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,684 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,684 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,684 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,684 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,684 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,684 on stmt: t = $phi112.1
2021-05-26 21:55:22,684 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,684 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,685 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,685 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,685 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,685 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,685 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,685 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,685 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,685 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,685 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,685 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,685 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,685 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,685 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,685 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,685 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,686 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,686 on stmt: jump 188
2021-05-26 21:55:22,686 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,686 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,686 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,686 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,686 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,686 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,686 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,686 on stmt: i = $phi190.2
2021-05-26 21:55:22,686 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,686 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,686 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,686 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,686 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,686 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,686 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,686 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,686 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,686 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,686 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,687 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,687 on stmt: jump 236
2021-05-26 21:55:22,687 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,687 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,687 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,687 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,687 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,687 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,687 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,687 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,687 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,687 on stmt: j = $phi238.3
2021-05-26 21:55:22,687 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,687 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,687 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,687 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,687 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,687 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,687 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,687 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,687 on stmt: jump 236
2021-05-26 21:55:22,687 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,687 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,688 on stmt: jump 188
2021-05-26 21:55:22,688 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,688 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,688 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,688 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,688 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,688 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,688 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,688 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,688 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,688 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,688 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,688 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,688 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,688 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,688 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,688 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,688 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,688 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,688 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,688 on stmt: jump 346
2021-05-26 21:55:22,688 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,689 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,689 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,689 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,689 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,689 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,689 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,689 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,689 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,689 on stmt: k = $phi348.2
2021-05-26 21:55:22,689 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,689 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,689 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,689 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,689 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,689 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,689 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,689 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,689 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,689 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,689 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,689 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,690 on stmt: jump 394
2021-05-26 21:55:22,690 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,690 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,690 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,690 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,690 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,690 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,690 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,690 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,690 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,690 on stmt: j = $phi396.3
2021-05-26 21:55:22,690 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,690 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,690 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,690 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,690 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,690 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,690 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,690 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,690 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,690 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,691 on stmt: jump 394
2021-05-26 21:55:22,691 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,691 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,691 on stmt: jump 346
2021-05-26 21:55:22,691 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,691 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,691 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,691 on stmt: time_register = $450inplace_add.3
2021-05-26 21:55:22,691 replaced with: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,691 on stmt: jump 108
2021-05-26 21:55:22,691 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,691 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2E4DC0>
2021-05-26 21:55:22,691 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,691 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,691 on stmt: return $458return_value.1
2021-05-26 21:55:22,691 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C2E4CA0>],
             446: [<numba.core.ir.Assign object at 0x0000024E1C31D5E0>]})
2021-05-26 21:55:22,692 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,692 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,692 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,692 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,692 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,692 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,692 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,692 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,692 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,692 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,693 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,694 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,694 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,694 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,694 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,694 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,694 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,695 on stmt: n = const(int, 0)
2021-05-26 21:55:22,696 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,696 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,697 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,698 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,698 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,698 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,699 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,699 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,699 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,699 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,699 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,700 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,700 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,700 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,701 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,701 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,701 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,701 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,701 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,701 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,701 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,702 on stmt: jump 108
2021-05-26 21:55:22,702 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,702 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,702 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,702 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,702 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,702 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,702 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,702 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,702 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,702 on stmt: t = $phi112.1
2021-05-26 21:55:22,702 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,703 on stmt: n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,703 find_def var='time_register' stmt=n = call $114load_global.2(time_register, func=$114load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
2021-05-26 21:55:22,703 find_def_from_top label 112
2021-05-26 21:55:22,703 idom 108 from label 112
2021-05-26 21:55:22,703 find_def_from_bottom label 108
2021-05-26 21:55:22,703 find_def_from_top label 108
2021-05-26 21:55:22,703 insert phi node time_register.2 = phi(incoming_values=[], incoming_blocks=[]) at 108
2021-05-26 21:55:22,704 find_def_from_bottom label 0
2021-05-26 21:55:22,704 incoming_def time_register = const(float, 0.0)
2021-05-26 21:55:22,704 find_def_from_bottom label 446
2021-05-26 21:55:22,704 incoming_def time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,704 replaced with: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,705 on stmt: $128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,705 find_def var='time_register' stmt=$128binary_subtract.8 = time_register - n
2021-05-26 21:55:22,705 find_def_from_top label 112
2021-05-26 21:55:22,705 idom 108 from label 112
2021-05-26 21:55:22,705 find_def_from_bottom label 108
2021-05-26 21:55:22,706 replaced with: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,706 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,706 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,706 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,706 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,706 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,706 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,707 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,707 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,707 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,707 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,707 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,708 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,708 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,708 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,708 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,708 on stmt: jump 188
2021-05-26 21:55:22,708 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,708 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,709 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,709 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,709 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,709 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,709 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,709 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,709 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,709 on stmt: i = $phi190.2
2021-05-26 21:55:22,709 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,709 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,709 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,709 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,709 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,709 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,709 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,710 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,710 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,710 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,710 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,710 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,710 on stmt: jump 236
2021-05-26 21:55:22,710 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,710 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,710 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,710 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,710 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,710 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,710 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,710 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,710 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,710 on stmt: j = $phi238.3
2021-05-26 21:55:22,710 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,711 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,711 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,711 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,711 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,711 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,711 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,711 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,711 on stmt: jump 236
2021-05-26 21:55:22,711 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,712 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,712 on stmt: jump 188
2021-05-26 21:55:22,712 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,712 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,712 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,712 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,712 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,712 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,713 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,713 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,713 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,713 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,713 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,713 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,714 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,714 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,714 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,714 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,714 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,714 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,714 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,715 on stmt: jump 346
2021-05-26 21:55:22,715 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,715 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,715 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,715 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,715 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,715 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,715 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,715 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,715 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,716 on stmt: k = $phi348.2
2021-05-26 21:55:22,716 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,716 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,716 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,716 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,716 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,716 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,716 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,716 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,716 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,716 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,716 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,716 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,717 on stmt: jump 394
2021-05-26 21:55:22,717 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,717 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,717 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,717 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,717 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,718 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,719 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,719 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,720 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,720 on stmt: j = $phi396.3
2021-05-26 21:55:22,720 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,720 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,720 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,720 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,720 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,720 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,721 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,721 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,721 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,721 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,721 on stmt: jump 394
2021-05-26 21:55:22,721 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,721 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,721 on stmt: jump 346
2021-05-26 21:55:22,721 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,721 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,721 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,721 find_def var='time_register' stmt=$450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,722 find_def_from_top label 446
2021-05-26 21:55:22,722 idom 346 from label 446
2021-05-26 21:55:22,722 find_def_from_bottom label 346
2021-05-26 21:55:22,722 find_def_from_top label 346
2021-05-26 21:55:22,722 idom 280 from label 346
2021-05-26 21:55:22,722 find_def_from_bottom label 280
2021-05-26 21:55:22,722 find_def_from_top label 280
2021-05-26 21:55:22,722 idom 188 from label 280
2021-05-26 21:55:22,722 find_def_from_bottom label 188
2021-05-26 21:55:22,722 find_def_from_top label 188
2021-05-26 21:55:22,722 idom 112 from label 188
2021-05-26 21:55:22,722 find_def_from_bottom label 112
2021-05-26 21:55:22,723 find_def_from_top label 112
2021-05-26 21:55:22,723 idom 108 from label 112
2021-05-26 21:55:22,723 find_def_from_bottom label 108
2021-05-26 21:55:22,723 replaced with: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,723 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,723 on stmt: jump 108
2021-05-26 21:55:22,723 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,723 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311D60>
2021-05-26 21:55:22,723 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,723 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,723 on stmt: return $458return_value.1
2021-05-26 21:55:22,724 Fix SSA violator on var frac
2021-05-26 21:55:22,724 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,724 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,724 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,724 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,724 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,724 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,724 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,724 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,724 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,724 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,724 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,725 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,725 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,725 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,725 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,725 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,725 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,725 on stmt: n = const(int, 0)
2021-05-26 21:55:22,725 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,725 first assign: frac
2021-05-26 21:55:22,725 replaced with: frac = const(float, 0.0)
2021-05-26 21:55:22,725 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,726 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,726 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,726 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,726 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,726 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,726 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,726 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,726 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,726 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,726 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,726 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,726 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,726 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,726 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,726 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,726 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,726 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,727 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,727 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,727 on stmt: jump 108
2021-05-26 21:55:22,727 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,727 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,727 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,727 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,727 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,727 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,727 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,727 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,727 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,727 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,727 on stmt: t = $phi112.1
2021-05-26 21:55:22,727 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,727 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,727 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,727 on stmt: frac = scale * $128binary_subtract.8
2021-05-26 21:55:22,727 replaced with: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,728 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,728 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,728 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,728 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,728 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,728 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,728 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,728 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,728 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,728 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,728 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,728 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,728 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,728 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,728 on stmt: jump 188
2021-05-26 21:55:22,728 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,728 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,728 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,728 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,728 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,728 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,728 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,729 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,729 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,729 on stmt: i = $phi190.2
2021-05-26 21:55:22,729 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,729 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,729 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,729 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,729 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,729 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,729 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,729 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,729 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,729 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,729 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,729 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,729 on stmt: jump 236
2021-05-26 21:55:22,729 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,729 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,729 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,729 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,729 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,729 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,729 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,729 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,730 on stmt: j = $phi238.3
2021-05-26 21:55:22,730 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,730 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,730 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,730 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,730 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,730 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,730 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,730 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,730 on stmt: jump 236
2021-05-26 21:55:22,730 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,730 on stmt: jump 188
2021-05-26 21:55:22,730 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,730 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,730 on stmt: frac = $284binary_subtract.3
2021-05-26 21:55:22,730 replaced with: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,730 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,731 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,731 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,731 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,731 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,731 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,731 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,731 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,731 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,731 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,731 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,731 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,731 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,731 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,731 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,732 on stmt: jump 346
2021-05-26 21:55:22,732 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,732 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,732 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,732 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,732 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,732 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,732 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,732 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,732 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,732 on stmt: k = $phi348.2
2021-05-26 21:55:22,732 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,732 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,732 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,732 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,732 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,732 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,732 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,732 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,732 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,732 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,732 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,732 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,733 on stmt: jump 394
2021-05-26 21:55:22,733 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,733 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,733 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,733 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,733 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,733 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,733 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,733 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,733 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,733 on stmt: j = $phi396.3
2021-05-26 21:55:22,733 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,733 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,733 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,733 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,733 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,733 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,733 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,733 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,733 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,733 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,733 on stmt: jump 394
2021-05-26 21:55:22,733 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,734 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,734 on stmt: jump 346
2021-05-26 21:55:22,734 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,734 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,734 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,734 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,734 on stmt: jump 108
2021-05-26 21:55:22,734 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,734 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C267A90>
2021-05-26 21:55:22,734 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,734 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,734 on stmt: return $458return_value.1
2021-05-26 21:55:22,734 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C27CEB0>],
             112: [<numba.core.ir.Assign object at 0x0000024E1C2E4EE0>],
             280: [<numba.core.ir.Assign object at 0x0000024E1C31D0D0>]})
2021-05-26 21:55:22,734 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,734 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,734 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,735 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,735 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,735 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,735 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,735 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,735 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,735 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,735 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,735 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,735 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,735 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,735 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,735 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,735 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,735 on stmt: n = const(int, 0)
2021-05-26 21:55:22,735 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,735 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,736 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,736 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,736 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,736 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,736 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,736 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,736 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,736 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,736 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,736 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,736 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,736 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,736 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,736 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,736 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,736 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,736 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,736 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,736 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,736 on stmt: jump 108
2021-05-26 21:55:22,737 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,737 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,737 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,737 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,737 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,737 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,737 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,737 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,737 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,737 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,737 on stmt: t = $phi112.1
2021-05-26 21:55:22,737 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,737 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,737 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,737 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,737 on stmt: index_frac.1 = frac * num_table
2021-05-26 21:55:22,737 find_def var='frac' stmt=index_frac.1 = frac * num_table
2021-05-26 21:55:22,737 replaced with: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,737 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,737 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,738 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,738 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,738 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,738 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,738 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,738 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,738 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,738 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,738 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,738 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,738 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,738 on stmt: jump 188
2021-05-26 21:55:22,738 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,738 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,738 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,738 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,738 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,738 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,738 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,738 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,739 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,739 on stmt: i = $phi190.2
2021-05-26 21:55:22,739 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,739 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,739 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,739 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,739 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,739 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,739 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,739 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,739 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,739 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,739 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,739 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,739 on stmt: jump 236
2021-05-26 21:55:22,739 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,739 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,739 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,739 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,739 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,739 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,740 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,740 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,740 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,740 on stmt: j = $phi238.3
2021-05-26 21:55:22,740 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,740 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,740 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,740 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,740 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,740 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,740 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,740 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,740 on stmt: jump 236
2021-05-26 21:55:22,740 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,740 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,740 on stmt: jump 188
2021-05-26 21:55:22,740 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,740 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,740 on stmt: $284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,740 find_def var='frac' stmt=$284binary_subtract.3 = scale - frac
2021-05-26 21:55:22,740 find_def_from_top label 280
2021-05-26 21:55:22,741 idom 188 from label 280
2021-05-26 21:55:22,741 find_def_from_bottom label 188
2021-05-26 21:55:22,741 find_def_from_top label 188
2021-05-26 21:55:22,741 idom 112 from label 188
2021-05-26 21:55:22,741 find_def_from_bottom label 112
2021-05-26 21:55:22,741 replaced with: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,741 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,741 on stmt: index_frac.2 = frac * num_table
2021-05-26 21:55:22,741 find_def var='frac' stmt=index_frac.2 = frac * num_table
2021-05-26 21:55:22,741 replaced with: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,741 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,741 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,741 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,741 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,741 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,741 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,741 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,742 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,742 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,742 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,742 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,742 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,742 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,742 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,742 on stmt: jump 346
2021-05-26 21:55:22,742 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,742 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,743 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,743 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,743 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,743 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,743 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,743 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,743 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,743 on stmt: k = $phi348.2
2021-05-26 21:55:22,743 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,743 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,743 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,743 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,743 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,744 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,744 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,744 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,744 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,744 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,744 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,744 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,744 on stmt: jump 394
2021-05-26 21:55:22,744 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,744 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,744 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,744 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,744 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,744 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,744 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,745 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,745 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,745 on stmt: j = $phi396.3
2021-05-26 21:55:22,745 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,745 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,745 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,745 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,745 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,745 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,745 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,746 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,746 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,746 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,746 on stmt: jump 394
2021-05-26 21:55:22,746 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,746 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,746 on stmt: jump 346
2021-05-26 21:55:22,746 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,747 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,747 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,747 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,747 on stmt: jump 108
2021-05-26 21:55:22,747 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,747 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311640>
2021-05-26 21:55:22,747 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,747 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,747 on stmt: return $458return_value.1
2021-05-26 21:55:22,748 Fix SSA violator on var j
2021-05-26 21:55:22,748 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,748 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,748 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,748 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,748 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,748 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,748 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,748 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,748 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,748 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,749 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,749 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,749 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,749 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,749 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,749 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,749 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,749 on stmt: n = const(int, 0)
2021-05-26 21:55:22,749 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,749 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,749 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,749 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,749 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,750 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,750 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,750 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,750 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,750 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,750 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,750 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,750 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,750 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,750 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,750 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,750 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,750 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,750 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,751 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,751 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,751 on stmt: jump 108
2021-05-26 21:55:22,751 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,751 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,751 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,751 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,751 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,751 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,751 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,751 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,751 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,751 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,751 on stmt: t = $phi112.1
2021-05-26 21:55:22,752 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,752 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,752 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,752 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,752 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,752 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,752 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,752 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,752 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,752 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,752 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,752 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,752 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,752 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,752 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,752 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,752 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,752 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,752 on stmt: jump 188
2021-05-26 21:55:22,752 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,752 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,752 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,753 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,753 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,753 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,753 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,753 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,753 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,753 on stmt: i = $phi190.2
2021-05-26 21:55:22,753 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,753 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,753 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,753 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,753 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,753 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,753 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,753 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,753 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,753 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,753 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,753 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,753 on stmt: jump 236
2021-05-26 21:55:22,753 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,753 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,754 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,754 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,754 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,754 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,754 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,754 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,754 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,754 on stmt: j = $phi238.3
2021-05-26 21:55:22,754 first assign: j
2021-05-26 21:55:22,754 replaced with: j = $phi238.3
2021-05-26 21:55:22,754 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,754 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,754 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,754 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,754 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,754 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,754 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,754 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,754 on stmt: jump 236
2021-05-26 21:55:22,754 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,754 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,754 on stmt: jump 188
2021-05-26 21:55:22,754 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,755 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,755 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,755 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,755 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,755 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,755 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,755 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,755 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,755 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,755 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,755 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,755 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,755 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,755 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,755 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,755 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,756 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,756 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,756 on stmt: jump 346
2021-05-26 21:55:22,756 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,756 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,756 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,756 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,756 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,756 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,756 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,756 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,756 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,756 on stmt: k = $phi348.2
2021-05-26 21:55:22,756 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,756 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,756 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,756 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,756 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,756 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,756 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,756 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,756 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,757 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,757 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,757 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,757 on stmt: jump 394
2021-05-26 21:55:22,757 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,757 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,757 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,757 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,757 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,757 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,757 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,757 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,757 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,758 on stmt: j = $phi396.3
2021-05-26 21:55:22,758 replaced with: j.1 = $phi396.3
2021-05-26 21:55:22,758 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,758 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,758 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,758 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,758 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,758 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,758 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,758 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,758 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,758 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,758 on stmt: jump 394
2021-05-26 21:55:22,759 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,759 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,759 on stmt: jump 346
2021-05-26 21:55:22,759 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,759 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,759 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,759 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,759 on stmt: jump 108
2021-05-26 21:55:22,759 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,759 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDC0>
2021-05-26 21:55:22,760 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,760 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,760 on stmt: return $458return_value.1
2021-05-26 21:55:22,760 Replaced assignments: defaultdict(<class 'list'>,
            {238: [<numba.core.ir.Assign object at 0x0000024E1C2E4C70>],
             396: [<numba.core.ir.Assign object at 0x0000024E1C311D30>]})
2021-05-26 21:55:22,761 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,761 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,761 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,761 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,761 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,761 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,762 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,762 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,762 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,762 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,762 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,762 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,762 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,762 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,762 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,763 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,763 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,763 on stmt: n = const(int, 0)
2021-05-26 21:55:22,763 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,763 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,763 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,763 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,763 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,763 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,763 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,763 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,764 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,764 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,764 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,764 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,764 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,764 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,764 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,764 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,764 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,764 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,765 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,765 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,765 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,765 on stmt: jump 108
2021-05-26 21:55:22,765 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,765 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,765 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,765 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,765 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,765 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,765 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,765 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,765 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,766 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,766 on stmt: t = $phi112.1
2021-05-26 21:55:22,766 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,766 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,766 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,766 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,766 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,766 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,766 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,766 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,766 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,766 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,766 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,766 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,766 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,766 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,766 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,766 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,766 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,767 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,767 on stmt: jump 188
2021-05-26 21:55:22,767 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,767 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,767 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,767 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,767 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,767 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,767 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,767 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,767 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,767 on stmt: i = $phi190.2
2021-05-26 21:55:22,767 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,767 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,767 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,767 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,767 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,767 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,767 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,767 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,768 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,768 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,768 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,768 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,768 on stmt: jump 236
2021-05-26 21:55:22,768 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,768 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,768 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,768 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,768 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,768 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,768 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,768 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,768 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,768 on stmt: j = $phi238.3
2021-05-26 21:55:22,768 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,768 find_def var='j' stmt=$246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,768 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,768 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,768 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,769 find_def var='j' stmt=$264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,769 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,769 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,769 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,769 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,769 on stmt: jump 236
2021-05-26 21:55:22,769 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,769 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,769 on stmt: jump 188
2021-05-26 21:55:22,769 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,769 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,769 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,769 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,769 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,769 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,769 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,769 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,769 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,769 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,769 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,769 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,770 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,770 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,770 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,770 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,770 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,770 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,770 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,770 on stmt: jump 346
2021-05-26 21:55:22,770 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,770 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,770 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,770 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,770 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,770 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,770 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,770 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,770 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,770 on stmt: k = $phi348.2
2021-05-26 21:55:22,770 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,770 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,771 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,771 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,771 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,772 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,772 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,772 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,772 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,772 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,772 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,772 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,772 on stmt: jump 394
2021-05-26 21:55:22,772 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,772 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,772 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,772 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,772 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,772 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,772 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,772 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,773 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,773 on stmt: j.1 = $phi396.3
2021-05-26 21:55:22,773 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,773 find_def var='j' stmt=$404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,773 replaced with: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,773 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,773 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,773 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,773 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,773 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,773 find_def var='j' stmt=$426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
2021-05-26 21:55:22,773 replaced with: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,773 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,773 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,773 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,773 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,773 on stmt: jump 394
2021-05-26 21:55:22,773 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,773 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,774 on stmt: jump 346
2021-05-26 21:55:22,774 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,774 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,774 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,774 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,774 on stmt: jump 108
2021-05-26 21:55:22,774 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,774 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C3111C0>
2021-05-26 21:55:22,774 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,774 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,774 on stmt: return $458return_value.1
2021-05-26 21:55:22,774 Fix SSA violator on var offset
2021-05-26 21:55:22,774 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,774 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,774 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,774 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,774 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,774 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,774 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,774 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,774 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,774 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,775 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,775 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,775 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,775 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,775 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,775 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,776 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,776 on stmt: n = const(int, 0)
2021-05-26 21:55:22,776 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,776 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,776 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,776 first assign: offset
2021-05-26 21:55:22,776 replaced with: offset = const(int, 0)
2021-05-26 21:55:22,776 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,776 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,776 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,776 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,776 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,776 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,776 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,776 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,776 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,776 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,776 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,776 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,776 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,776 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,777 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,777 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,777 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,777 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,777 on stmt: jump 108
2021-05-26 21:55:22,777 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,777 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,777 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,777 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,777 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,777 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,777 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,777 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,777 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,777 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,777 on stmt: t = $phi112.1
2021-05-26 21:55:22,777 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,777 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,777 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,777 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,777 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,777 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,778 on stmt: offset = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,778 replaced with: offset.1 = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,778 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,778 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,778 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,778 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,778 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,778 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,778 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,778 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,778 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,778 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,778 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,778 on stmt: jump 188
2021-05-26 21:55:22,778 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,778 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,778 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,778 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,778 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,778 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,778 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,778 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,779 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,779 on stmt: i = $phi190.2
2021-05-26 21:55:22,779 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,779 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,779 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,779 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,779 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,779 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,779 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,779 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,779 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,779 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,779 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,779 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,779 on stmt: jump 236
2021-05-26 21:55:22,779 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,779 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,779 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,779 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,779 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,779 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,779 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,780 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,780 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,780 on stmt: j = $phi238.3
2021-05-26 21:55:22,780 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,780 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,780 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,780 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,780 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,780 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,780 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,780 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,780 on stmt: jump 236
2021-05-26 21:55:22,780 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,781 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,781 on stmt: jump 188
2021-05-26 21:55:22,781 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,781 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,781 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,781 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,781 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,781 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,781 on stmt: offset = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,781 replaced with: offset.2 = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,781 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,781 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,781 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,782 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,782 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,782 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,782 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,782 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,782 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,782 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,782 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,782 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,782 on stmt: jump 346
2021-05-26 21:55:22,782 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,782 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,782 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,782 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,783 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,783 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,783 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,783 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,783 on stmt: k = $phi348.2
2021-05-26 21:55:22,783 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,783 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,783 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,783 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,783 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,783 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,783 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,783 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,783 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,783 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,783 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,783 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,783 on stmt: jump 394
2021-05-26 21:55:22,783 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,783 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,783 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,784 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,784 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,784 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,784 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,784 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,784 on stmt: j.1 = $phi396.3
2021-05-26 21:55:22,784 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,784 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,784 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,784 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,784 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,784 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,784 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,784 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,784 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,784 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,784 on stmt: jump 394
2021-05-26 21:55:22,784 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,784 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,784 on stmt: jump 346
2021-05-26 21:55:22,784 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,784 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,784 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,785 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,785 on stmt: jump 108
2021-05-26 21:55:22,785 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C2673A0>
2021-05-26 21:55:22,785 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,785 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,785 on stmt: return $458return_value.1
2021-05-26 21:55:22,785 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C267D00>],
             112: [<numba.core.ir.Assign object at 0x0000024E1C31D1C0>],
             280: [<numba.core.ir.Assign object at 0x0000024E1C311790>]})
2021-05-26 21:55:22,785 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,785 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,786 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,786 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,786 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,786 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,786 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,786 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,786 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,786 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,786 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,786 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,786 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,786 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,786 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,786 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,786 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,786 on stmt: n = const(int, 0)
2021-05-26 21:55:22,786 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,786 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,786 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,786 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,786 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,787 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,787 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,787 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,787 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,787 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,787 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,787 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,787 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,787 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,787 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,787 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,787 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,787 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,787 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,787 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,787 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,787 on stmt: jump 108
2021-05-26 21:55:22,787 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,787 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,787 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,787 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,788 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,788 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,788 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,788 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,788 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,788 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,788 on stmt: t = $phi112.1
2021-05-26 21:55:22,788 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,788 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,788 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,788 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,788 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,788 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,788 on stmt: offset.1 = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,788 on stmt: eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,789 find_def var='offset' stmt=eta.1 = index_frac.1 - offset
2021-05-26 21:55:22,789 replaced with: eta.1 = index_frac.1 - offset.1
2021-05-26 21:55:22,789 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,789 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,789 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,789 on stmt: $170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,789 find_def var='offset' stmt=$170binary_subtract.25 = nwin - offset
2021-05-26 21:55:22,789 replaced with: $170binary_subtract.25 = nwin - offset.1
2021-05-26 21:55:22,789 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,789 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,789 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,789 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,789 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,789 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,789 on stmt: jump 188
2021-05-26 21:55:22,789 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,789 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,789 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,790 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,790 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,790 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,790 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,790 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,790 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,790 on stmt: i = $phi190.2
2021-05-26 21:55:22,790 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,790 on stmt: $202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,790 find_def var='offset' stmt=$202binary_add.8 = offset + $200binary_multiply.7
2021-05-26 21:55:22,790 find_def_from_top label 190
2021-05-26 21:55:22,790 idom 188 from label 190
2021-05-26 21:55:22,790 find_def_from_bottom label 188
2021-05-26 21:55:22,790 find_def_from_top label 188
2021-05-26 21:55:22,790 idom 112 from label 188
2021-05-26 21:55:22,790 find_def_from_bottom label 112
2021-05-26 21:55:22,790 replaced with: $202binary_add.8 = offset.1 + $200binary_multiply.7
2021-05-26 21:55:22,790 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,790 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,790 on stmt: $218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,790 find_def var='offset' stmt=$218binary_add.16 = offset + $216binary_multiply.15
2021-05-26 21:55:22,791 find_def_from_top label 190
2021-05-26 21:55:22,791 idom 188 from label 190
2021-05-26 21:55:22,791 find_def_from_bottom label 188
2021-05-26 21:55:22,791 find_def_from_top label 188
2021-05-26 21:55:22,791 idom 112 from label 188
2021-05-26 21:55:22,791 find_def_from_bottom label 112
2021-05-26 21:55:22,791 replaced with: $218binary_add.16 = offset.1 + $216binary_multiply.15
2021-05-26 21:55:22,791 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,791 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,791 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,791 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,791 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,792 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,792 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,792 on stmt: jump 236
2021-05-26 21:55:22,792 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,792 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,792 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,792 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,792 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,792 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,792 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,792 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,792 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,792 on stmt: j = $phi238.3
2021-05-26 21:55:22,792 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,792 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,792 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,792 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,792 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,792 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,793 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,793 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,793 on stmt: jump 236
2021-05-26 21:55:22,793 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,793 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,793 on stmt: jump 188
2021-05-26 21:55:22,793 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,793 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,793 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,793 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,793 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,793 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,793 on stmt: offset.2 = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,793 on stmt: eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,793 find_def var='offset' stmt=eta.2 = index_frac.2 - offset
2021-05-26 21:55:22,793 replaced with: eta.2 = index_frac.2 - offset.2
2021-05-26 21:55:22,793 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,793 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,793 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,793 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,794 on stmt: $328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,794 find_def var='offset' stmt=$328binary_subtract.21 = nwin - offset
2021-05-26 21:55:22,794 replaced with: $328binary_subtract.21 = nwin - offset.2
2021-05-26 21:55:22,794 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,794 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,794 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,794 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,794 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,794 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,794 on stmt: jump 346
2021-05-26 21:55:22,794 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,794 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,794 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,794 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,794 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,794 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,794 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,794 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,794 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,794 on stmt: k = $phi348.2
2021-05-26 21:55:22,794 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,795 on stmt: $360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,795 find_def var='offset' stmt=$360binary_add.8 = offset + $358binary_multiply.7
2021-05-26 21:55:22,795 find_def_from_top label 348
2021-05-26 21:55:22,795 idom 346 from label 348
2021-05-26 21:55:22,795 find_def_from_bottom label 346
2021-05-26 21:55:22,795 find_def_from_top label 346
2021-05-26 21:55:22,795 idom 280 from label 346
2021-05-26 21:55:22,795 find_def_from_bottom label 280
2021-05-26 21:55:22,795 replaced with: $360binary_add.8 = offset.2 + $358binary_multiply.7
2021-05-26 21:55:22,795 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,795 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,795 on stmt: $376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,795 find_def var='offset' stmt=$376binary_add.16 = offset + $374binary_multiply.15
2021-05-26 21:55:22,795 find_def_from_top label 348
2021-05-26 21:55:22,795 idom 346 from label 348
2021-05-26 21:55:22,795 find_def_from_bottom label 346
2021-05-26 21:55:22,795 find_def_from_top label 346
2021-05-26 21:55:22,796 idom 280 from label 346
2021-05-26 21:55:22,796 find_def_from_bottom label 280
2021-05-26 21:55:22,796 replaced with: $376binary_add.16 = offset.2 + $374binary_multiply.15
2021-05-26 21:55:22,796 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,796 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,796 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,796 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,796 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,796 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,796 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,796 on stmt: jump 394
2021-05-26 21:55:22,796 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,796 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,796 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,796 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,796 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,796 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,796 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,796 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,796 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,796 on stmt: j.1 = $phi396.3
2021-05-26 21:55:22,797 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,797 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,797 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,797 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,797 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,797 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,797 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,797 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,797 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,797 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,797 on stmt: jump 394
2021-05-26 21:55:22,797 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,797 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,797 on stmt: jump 346
2021-05-26 21:55:22,797 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,797 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,797 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,797 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,797 on stmt: jump 108
2021-05-26 21:55:22,797 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,797 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C311F70>
2021-05-26 21:55:22,798 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,798 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,798 on stmt: return $458return_value.1
2021-05-26 21:55:22,798 Fix SSA violator on var n
2021-05-26 21:55:22,798 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,798 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,798 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,798 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,798 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,798 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,798 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,798 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,798 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,798 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,798 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,798 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,798 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,798 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,798 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,798 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,798 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,798 on stmt: n = const(int, 0)
2021-05-26 21:55:22,799 first assign: n
2021-05-26 21:55:22,799 replaced with: n = const(int, 0)
2021-05-26 21:55:22,799 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,799 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,799 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,799 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,799 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,799 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,799 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,799 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,799 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,799 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,799 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,799 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,799 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,799 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,799 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,799 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,799 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,799 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,799 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,799 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,799 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,800 on stmt: jump 108
2021-05-26 21:55:22,800 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,800 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,800 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,800 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,800 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,800 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,800 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,800 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,800 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,800 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,800 on stmt: t = $phi112.1
2021-05-26 21:55:22,800 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,800 on stmt: n = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,800 replaced with: n.1 = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,800 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,800 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,800 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,800 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,800 on stmt: offset.1 = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,800 on stmt: eta.1 = index_frac.1 - offset.1
2021-05-26 21:55:22,801 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,801 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,801 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,801 on stmt: $170binary_subtract.25 = nwin - offset.1
2021-05-26 21:55:22,801 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,801 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,801 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,801 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,801 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,801 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,801 on stmt: jump 188
2021-05-26 21:55:22,801 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,801 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,801 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,801 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,801 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,801 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,801 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,802 on stmt: i = $phi190.2
2021-05-26 21:55:22,802 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,802 on stmt: $202binary_add.8 = offset.1 + $200binary_multiply.7
2021-05-26 21:55:22,802 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,802 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,802 on stmt: $218binary_add.16 = offset.1 + $216binary_multiply.15
2021-05-26 21:55:22,802 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,802 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,802 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,802 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,802 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,802 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,802 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,802 on stmt: jump 236
2021-05-26 21:55:22,802 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,802 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,802 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,803 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,803 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,803 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,803 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,803 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,803 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,803 on stmt: j = $phi238.3
2021-05-26 21:55:22,803 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,803 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,803 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,803 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,803 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,803 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,803 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,803 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,803 on stmt: jump 236
2021-05-26 21:55:22,803 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,803 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,803 on stmt: jump 188
2021-05-26 21:55:22,803 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,804 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,804 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,804 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,804 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,804 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,804 on stmt: offset.2 = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,804 on stmt: eta.2 = index_frac.2 - offset.2
2021-05-26 21:55:22,804 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,804 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,804 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,804 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,804 on stmt: $328binary_subtract.21 = nwin - offset.2
2021-05-26 21:55:22,804 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,804 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,804 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,804 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,804 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,804 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,804 on stmt: jump 346
2021-05-26 21:55:22,804 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,804 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,804 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,805 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,805 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,805 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,805 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,805 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,805 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,805 on stmt: k = $phi348.2
2021-05-26 21:55:22,805 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,805 on stmt: $360binary_add.8 = offset.2 + $358binary_multiply.7
2021-05-26 21:55:22,805 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,805 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,805 on stmt: $376binary_add.16 = offset.2 + $374binary_multiply.15
2021-05-26 21:55:22,805 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,805 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,805 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,805 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,805 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,805 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,806 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,806 on stmt: jump 394
2021-05-26 21:55:22,806 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,806 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,806 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,806 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,806 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,806 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,806 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,806 on stmt: j.1 = $phi396.3
2021-05-26 21:55:22,806 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,806 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,806 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,806 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,806 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,806 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,806 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,806 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,806 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,806 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,807 on stmt: jump 394
2021-05-26 21:55:22,807 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,807 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,807 on stmt: jump 346
2021-05-26 21:55:22,807 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,807 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,807 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,807 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,807 on stmt: jump 108
2021-05-26 21:55:22,807 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,807 Running <numba.core.ssa._FreshVarHandler object at 0x0000024E1C31DDF0>
2021-05-26 21:55:22,807 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,807 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,807 on stmt: return $458return_value.1
2021-05-26 21:55:22,807 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024E1C31DD00>],
             112: [<numba.core.ir.Assign object at 0x0000024E1C2E4EB0>]})
2021-05-26 21:55:22,807 ==== SSA block rewrite pass on 0
2021-05-26 21:55:22,807 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,808 on stmt: x = arg(0, name=x)
2021-05-26 21:55:22,808 on stmt: y = arg(1, name=y)
2021-05-26 21:55:22,808 on stmt: sample_ratio = arg(2, name=sample_ratio)
2021-05-26 21:55:22,808 on stmt: interp_win = arg(3, name=interp_win)
2021-05-26 21:55:22,808 on stmt: interp_delta = arg(4, name=interp_delta)
2021-05-26 21:55:22,808 on stmt: num_table = arg(5, name=num_table)
2021-05-26 21:55:22,808 on stmt: $2load_global.0 = global(min: <built-in function min>)
2021-05-26 21:55:22,808 on stmt: $const4.1 = const(float, 1.0)
2021-05-26 21:55:22,808 on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
2021-05-26 21:55:22,808 on stmt: $const12.4 = const(float, 1.0)
2021-05-26 21:55:22,808 on stmt: time_increment = $const12.4 / sample_ratio
2021-05-26 21:55:22,808 on stmt: $20load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,808 on stmt: $26binary_multiply.10 = scale * num_table
2021-05-26 21:55:22,808 on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None)
2021-05-26 21:55:22,808 on stmt: time_register = const(float, 0.0)
2021-05-26 21:55:22,808 on stmt: n = const(int, 0)
2021-05-26 21:55:22,809 on stmt: frac = const(float, 0.0)
2021-05-26 21:55:22,809 on stmt: index_frac = const(float, 0.0)
2021-05-26 21:55:22,809 on stmt: offset = const(int, 0)
2021-05-26 21:55:22,809 on stmt: eta = const(float, 0.0)
2021-05-26 21:55:22,809 on stmt: weight = const(float, 0.0)
2021-05-26 21:55:22,809 on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
2021-05-26 21:55:22,809 on stmt: $const64.21 = const(int, 0)
2021-05-26 21:55:22,809 on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
2021-05-26 21:55:22,809 on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
2021-05-26 21:55:22,809 on stmt: $const74.25 = const(int, 0)
2021-05-26 21:55:22,809 on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
2021-05-26 21:55:22,809 on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,809 on stmt: $const84.29 = const(int, 0)
2021-05-26 21:55:22,809 on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
2021-05-26 21:55:22,809 on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
2021-05-26 21:55:22,809 on stmt: $const94.33 = const(int, 1)
2021-05-26 21:55:22,809 on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
2021-05-26 21:55:22,809 on stmt: $100load_global.35 = global(range: <class 'range'>)
2021-05-26 21:55:22,809 on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
2021-05-26 21:55:22,809 on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
2021-05-26 21:55:22,809 on stmt: $phi108.0 = $106get_iter.38
2021-05-26 21:55:22,810 on stmt: jump 108
2021-05-26 21:55:22,810 ==== SSA block rewrite pass on 108
2021-05-26 21:55:22,810 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,810 on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 446])
2021-05-26 21:55:22,810 on stmt: $108for_iter.1 = iternext(value=$phi108.0)
2021-05-26 21:55:22,810 on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
2021-05-26 21:55:22,810 on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
2021-05-26 21:55:22,810 on stmt: $phi112.1 = $108for_iter.2
2021-05-26 21:55:22,810 on stmt: branch $108for_iter.3, 112, 456
2021-05-26 21:55:22,810 ==== SSA block rewrite pass on 112
2021-05-26 21:55:22,810 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,810 on stmt: t = $phi112.1
2021-05-26 21:55:22,810 on stmt: $114load_global.2 = global(int: <class 'int'>)
2021-05-26 21:55:22,810 on stmt: n.1 = call $114load_global.2(time_register.2, func=$114load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
2021-05-26 21:55:22,810 on stmt: $128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,810 find_def var='n' stmt=$128binary_subtract.8 = time_register.2 - n
2021-05-26 21:55:22,810 replaced with: $128binary_subtract.8 = time_register.2 - n.1
2021-05-26 21:55:22,810 on stmt: frac.1 = scale * $128binary_subtract.8
2021-05-26 21:55:22,810 on stmt: index_frac.1 = frac.1 * num_table
2021-05-26 21:55:22,811 on stmt: $142load_global.13 = global(int: <class 'int'>)
2021-05-26 21:55:22,811 on stmt: offset.1 = call $142load_global.13(index_frac.1, func=$142load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
2021-05-26 21:55:22,811 on stmt: eta.1 = index_frac.1 - offset.1
2021-05-26 21:55:22,811 on stmt: $158load_global.19 = global(min: <built-in function min>)
2021-05-26 21:55:22,811 on stmt: $const162.21 = const(int, 1)
2021-05-26 21:55:22,811 on stmt: $164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,811 find_def var='n' stmt=$164binary_add.22 = n + $const162.21
2021-05-26 21:55:22,811 replaced with: $164binary_add.22 = n.1 + $const162.21
2021-05-26 21:55:22,811 on stmt: $170binary_subtract.25 = nwin - offset.1
2021-05-26 21:55:22,811 on stmt: $174binary_floor_divide.27 = $170binary_subtract.25 // index_step
2021-05-26 21:55:22,811 on stmt: i_max = call $158load_global.19($164binary_add.22, $174binary_floor_divide.27, func=$158load_global.19, args=[Var($164binary_add.22, interpn.py:42), Var($174binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,812 on stmt: $180load_global.29 = global(range: <class 'range'>)
2021-05-26 21:55:22,812 on stmt: $184call_function.31 = call $180load_global.29(i_max, func=$180load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
2021-05-26 21:55:22,812 on stmt: $186get_iter.32 = getiter(value=$184call_function.31)
2021-05-26 21:55:22,812 on stmt: $phi188.1 = $186get_iter.32
2021-05-26 21:55:22,812 on stmt: jump 188
2021-05-26 21:55:22,812 ==== SSA block rewrite pass on 188
2021-05-26 21:55:22,812 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,812 on stmt: $188for_iter.2 = iternext(value=$phi188.1)
2021-05-26 21:55:22,812 on stmt: $188for_iter.3 = pair_first(value=$188for_iter.2)
2021-05-26 21:55:22,812 on stmt: $188for_iter.4 = pair_second(value=$188for_iter.2)
2021-05-26 21:55:22,812 on stmt: $phi190.2 = $188for_iter.3
2021-05-26 21:55:22,812 on stmt: branch $188for_iter.4, 190, 280
2021-05-26 21:55:22,812 ==== SSA block rewrite pass on 190
2021-05-26 21:55:22,812 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,812 on stmt: i = $phi190.2
2021-05-26 21:55:22,812 on stmt: $200binary_multiply.7 = i * index_step
2021-05-26 21:55:22,812 on stmt: $202binary_add.8 = offset.1 + $200binary_multiply.7
2021-05-26 21:55:22,812 on stmt: $204binary_subscr.9 = getitem(value=interp_win, index=$202binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,812 on stmt: $216binary_multiply.15 = i * index_step
2021-05-26 21:55:22,812 on stmt: $218binary_add.16 = offset.1 + $216binary_multiply.15
2021-05-26 21:55:22,813 on stmt: $220binary_subscr.17 = getitem(value=interp_delta, index=$218binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,813 on stmt: $222binary_multiply.18 = eta.1 * $220binary_subscr.17
2021-05-26 21:55:22,813 on stmt: weight.1 = $204binary_subscr.9 + $222binary_multiply.18
2021-05-26 21:55:22,813 on stmt: $228load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,813 on stmt: $232call_function.22 = call $228load_global.20(n_channels, func=$228load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,813 on stmt: $234get_iter.23 = getiter(value=$232call_function.22)
2021-05-26 21:55:22,813 on stmt: $phi236.2 = $234get_iter.23
2021-05-26 21:55:22,813 on stmt: jump 236
2021-05-26 21:55:22,813 ==== SSA block rewrite pass on 236
2021-05-26 21:55:22,813 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,813 on stmt: $236for_iter.3 = iternext(value=$phi236.2)
2021-05-26 21:55:22,814 on stmt: $236for_iter.4 = pair_first(value=$236for_iter.3)
2021-05-26 21:55:22,814 on stmt: $236for_iter.5 = pair_second(value=$236for_iter.3)
2021-05-26 21:55:22,814 on stmt: $phi238.3 = $236for_iter.4
2021-05-26 21:55:22,814 on stmt: branch $236for_iter.5, 238, 278
2021-05-26 21:55:22,814 ==== SSA block rewrite pass on 238
2021-05-26 21:55:22,814 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,814 on stmt: j = $phi238.3
2021-05-26 21:55:22,814 on stmt: $246build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
2021-05-26 21:55:22,814 on stmt: $250binary_subscr.10 = getitem(value=y, index=$246build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,814 on stmt: $260binary_subtract.15 = n - i
2021-05-26 21:55:22,814 find_def var='n' stmt=$260binary_subtract.15 = n - i
2021-05-26 21:55:22,814 find_def_from_top label 238
2021-05-26 21:55:22,815 idom 236 from label 238
2021-05-26 21:55:22,815 find_def_from_bottom label 236
2021-05-26 21:55:22,815 find_def_from_top label 236
2021-05-26 21:55:22,815 idom 190 from label 236
2021-05-26 21:55:22,815 find_def_from_bottom label 190
2021-05-26 21:55:22,815 find_def_from_top label 190
2021-05-26 21:55:22,815 idom 188 from label 190
2021-05-26 21:55:22,815 find_def_from_bottom label 188
2021-05-26 21:55:22,815 find_def_from_top label 188
2021-05-26 21:55:22,815 idom 112 from label 188
2021-05-26 21:55:22,815 find_def_from_bottom label 112
2021-05-26 21:55:22,815 replaced with: $260binary_subtract.15 = n.1 - i
2021-05-26 21:55:22,816 on stmt: $264build_tuple.17 = build_tuple(items=[Var($260binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
2021-05-26 21:55:22,816 on stmt: $266binary_subscr.18 = getitem(value=x, index=$264build_tuple.17, fn=<built-in function getitem>)
2021-05-26 21:55:22,816 on stmt: $268binary_multiply.19 = weight.1 * $266binary_subscr.18
2021-05-26 21:55:22,816 on stmt: $270inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$250binary_subscr.10, rhs=$268binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,816 on stmt: y[$246build_tuple.7] = $270inplace_add.20
2021-05-26 21:55:22,816 on stmt: jump 236
2021-05-26 21:55:22,816 ==== SSA block rewrite pass on 278
2021-05-26 21:55:22,816 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,816 on stmt: jump 188
2021-05-26 21:55:22,816 ==== SSA block rewrite pass on 280
2021-05-26 21:55:22,817 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,817 on stmt: $284binary_subtract.3 = scale - frac.1
2021-05-26 21:55:22,817 on stmt: frac.2 = $284binary_subtract.3
2021-05-26 21:55:22,817 on stmt: index_frac.2 = frac.2 * num_table
2021-05-26 21:55:22,817 on stmt: $296load_global.7 = global(int: <class 'int'>)
2021-05-26 21:55:22,817 on stmt: offset.2 = call $296load_global.7(index_frac.2, func=$296load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
2021-05-26 21:55:22,817 on stmt: eta.2 = index_frac.2 - offset.2
2021-05-26 21:55:22,817 on stmt: $312load_global.13 = global(min: <built-in function min>)
2021-05-26 21:55:22,817 on stmt: $318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,817 find_def var='n' stmt=$318binary_subtract.16 = n_orig - n
2021-05-26 21:55:22,817 find_def_from_top label 280
2021-05-26 21:55:22,817 idom 188 from label 280
2021-05-26 21:55:22,817 find_def_from_bottom label 188
2021-05-26 21:55:22,817 find_def_from_top label 188
2021-05-26 21:55:22,817 idom 112 from label 188
2021-05-26 21:55:22,817 find_def_from_bottom label 112
2021-05-26 21:55:22,817 replaced with: $318binary_subtract.16 = n_orig - n.1
2021-05-26 21:55:22,817 on stmt: $const320.17 = const(int, 1)
2021-05-26 21:55:22,818 on stmt: $322binary_subtract.18 = $318binary_subtract.16 - $const320.17
2021-05-26 21:55:22,818 on stmt: $328binary_subtract.21 = nwin - offset.2
2021-05-26 21:55:22,818 on stmt: $332binary_floor_divide.23 = $328binary_subtract.21 // index_step
2021-05-26 21:55:22,818 on stmt: k_max = call $312load_global.13($322binary_subtract.18, $332binary_floor_divide.23, func=$312load_global.13, args=[Var($322binary_subtract.18, interpn.py:60), Var($332binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,818 on stmt: $338load_global.25 = global(range: <class 'range'>)
2021-05-26 21:55:22,818 on stmt: $342call_function.27 = call $338load_global.25(k_max, func=$338load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
2021-05-26 21:55:22,818 on stmt: $344get_iter.28 = getiter(value=$342call_function.27)
2021-05-26 21:55:22,818 on stmt: $phi346.1 = $344get_iter.28
2021-05-26 21:55:22,818 on stmt: jump 346
2021-05-26 21:55:22,818 ==== SSA block rewrite pass on 346
2021-05-26 21:55:22,818 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,818 on stmt: $346for_iter.2 = iternext(value=$phi346.1)
2021-05-26 21:55:22,818 on stmt: $346for_iter.3 = pair_first(value=$346for_iter.2)
2021-05-26 21:55:22,818 on stmt: $346for_iter.4 = pair_second(value=$346for_iter.2)
2021-05-26 21:55:22,818 on stmt: $phi348.2 = $346for_iter.3
2021-05-26 21:55:22,818 on stmt: branch $346for_iter.4, 348, 446
2021-05-26 21:55:22,818 ==== SSA block rewrite pass on 348
2021-05-26 21:55:22,818 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,818 on stmt: k = $phi348.2
2021-05-26 21:55:22,819 on stmt: $358binary_multiply.7 = k * index_step
2021-05-26 21:55:22,819 on stmt: $360binary_add.8 = offset.2 + $358binary_multiply.7
2021-05-26 21:55:22,819 on stmt: $362binary_subscr.9 = getitem(value=interp_win, index=$360binary_add.8, fn=<built-in function getitem>)
2021-05-26 21:55:22,819 on stmt: $374binary_multiply.15 = k * index_step
2021-05-26 21:55:22,819 on stmt: $376binary_add.16 = offset.2 + $374binary_multiply.15
2021-05-26 21:55:22,819 on stmt: $378binary_subscr.17 = getitem(value=interp_delta, index=$376binary_add.16, fn=<built-in function getitem>)
2021-05-26 21:55:22,819 on stmt: $380binary_multiply.18 = eta.2 * $378binary_subscr.17
2021-05-26 21:55:22,819 on stmt: weight.2 = $362binary_subscr.9 + $380binary_multiply.18
2021-05-26 21:55:22,819 on stmt: $386load_global.20 = global(range: <class 'range'>)
2021-05-26 21:55:22,819 on stmt: $390call_function.22 = call $386load_global.20(n_channels, func=$386load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
2021-05-26 21:55:22,819 on stmt: $392get_iter.23 = getiter(value=$390call_function.22)
2021-05-26 21:55:22,819 on stmt: $phi394.2 = $392get_iter.23
2021-05-26 21:55:22,819 on stmt: jump 394
2021-05-26 21:55:22,819 ==== SSA block rewrite pass on 394
2021-05-26 21:55:22,819 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,820 on stmt: $394for_iter.3 = iternext(value=$phi394.2)
2021-05-26 21:55:22,820 on stmt: $394for_iter.4 = pair_first(value=$394for_iter.3)
2021-05-26 21:55:22,820 on stmt: $394for_iter.5 = pair_second(value=$394for_iter.3)
2021-05-26 21:55:22,820 on stmt: $phi396.3 = $394for_iter.4
2021-05-26 21:55:22,820 on stmt: branch $394for_iter.5, 396, 442
2021-05-26 21:55:22,820 ==== SSA block rewrite pass on 396
2021-05-26 21:55:22,820 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,820 on stmt: j.1 = $phi396.3
2021-05-26 21:55:22,820 on stmt: $404build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,820 on stmt: $408binary_subscr.10 = getitem(value=y, index=$404build_tuple.7, fn=<built-in function getitem>)
2021-05-26 21:55:22,820 on stmt: $418binary_add.15 = n + k
2021-05-26 21:55:22,820 find_def var='n' stmt=$418binary_add.15 = n + k
2021-05-26 21:55:22,820 find_def_from_top label 396
2021-05-26 21:55:22,820 idom 394 from label 396
2021-05-26 21:55:22,820 find_def_from_bottom label 394
2021-05-26 21:55:22,820 find_def_from_top label 394
2021-05-26 21:55:22,820 idom 348 from label 394
2021-05-26 21:55:22,820 find_def_from_bottom label 348
2021-05-26 21:55:22,820 find_def_from_top label 348
2021-05-26 21:55:22,820 idom 346 from label 348
2021-05-26 21:55:22,820 find_def_from_bottom label 346
2021-05-26 21:55:22,820 find_def_from_top label 346
2021-05-26 21:55:22,820 idom 280 from label 346
2021-05-26 21:55:22,821 find_def_from_bottom label 280
2021-05-26 21:55:22,821 find_def_from_top label 280
2021-05-26 21:55:22,821 idom 188 from label 280
2021-05-26 21:55:22,821 find_def_from_bottom label 188
2021-05-26 21:55:22,821 find_def_from_top label 188
2021-05-26 21:55:22,821 idom 112 from label 188
2021-05-26 21:55:22,821 find_def_from_bottom label 112
2021-05-26 21:55:22,821 replaced with: $418binary_add.15 = n.1 + k
2021-05-26 21:55:22,821 on stmt: $const420.16 = const(int, 1)
2021-05-26 21:55:22,821 on stmt: $422binary_add.17 = $418binary_add.15 + $const420.16
2021-05-26 21:55:22,821 on stmt: $426build_tuple.19 = build_tuple(items=[Var($422binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
2021-05-26 21:55:22,821 on stmt: $428binary_subscr.20 = getitem(value=x, index=$426build_tuple.19, fn=<built-in function getitem>)
2021-05-26 21:55:22,821 on stmt: $430binary_multiply.21 = weight.2 * $428binary_subscr.20
2021-05-26 21:55:22,821 on stmt: $432inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$408binary_subscr.10, rhs=$430binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,821 on stmt: y[$404build_tuple.7] = $432inplace_add.22
2021-05-26 21:55:22,821 on stmt: jump 394
2021-05-26 21:55:22,821 ==== SSA block rewrite pass on 442
2021-05-26 21:55:22,821 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,821 on stmt: jump 346
2021-05-26 21:55:22,821 ==== SSA block rewrite pass on 446
2021-05-26 21:55:22,822 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,822 on stmt: $450inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
2021-05-26 21:55:22,822 on stmt: time_register.1 = $450inplace_add.3
2021-05-26 21:55:22,822 on stmt: jump 108
2021-05-26 21:55:22,822 ==== SSA block rewrite pass on 456
2021-05-26 21:55:22,822 Running <numba.core.ssa._FixSSAVars object at 0x0000024E1C31D820>
2021-05-26 21:55:22,822 on stmt: $const456.0 = const(NoneType, None)
2021-05-26 21:55:22,822 on stmt: $458return_value.1 = cast(value=$const456.0)
2021-05-26 21:55:22,822 on stmt: return $458return_value.1
2021-05-26 21:55:26,406 Creating Perceptual Hash for each feature
2021-05-26 21:55:26,422 Creating Perceptual Hash for each feature
2021-05-26 21:55:26,427 Creating Perceptual Hash for each feature
2021-05-26 21:55:26,429 Creating Perceptual Hash for each feature
2021-05-26 21:55:26,430 Checking if the 2 songs are opened
2021-05-26 21:55:27,554 open song 2
2021-05-26 21:55:29,582 subprocess.call(['ffmpeg', '-y', '-f', 'mp3', '-i', 'C:/Users/RS3/Desktop/ShazamLikeApp/Database/Songs/Group03_Song02_Full.mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2021-05-26 21:55:33,626 Creating Perceptual Hash for each feature
2021-05-26 21:55:33,636 Creating Perceptual Hash for each feature
2021-05-26 21:55:33,641 Creating Perceptual Hash for each feature
2021-05-26 21:55:33,643 Creating Perceptual Hash for each feature
2021-05-26 21:55:33,644 Checking if the 2 songs are opened
2021-05-26 21:55:33,645 Mixing the 2 songs together with 0.0 % of song1and 100.0 % of song2
2021-05-26 21:55:34,300 Creating Perceptual Hash for each feature
2021-05-26 21:55:34,309 Creating Perceptual Hash for each feature
2021-05-26 21:55:34,313 Creating Perceptual Hash for each feature
2021-05-26 21:55:34,314 Creating Perceptual Hash for each feature
2021-05-26 21:55:34,315 Mixing Output
2021-05-26 21:55:35,874 Checking if the 2 songs are opened
2021-05-26 21:55:35,875 Mixing the 2 songs together with 10.0 % of song1and 90.0 % of song2
2021-05-26 21:55:36,475 Creating Perceptual Hash for each feature
2021-05-26 21:55:36,485 Creating Perceptual Hash for each feature
2021-05-26 21:55:36,490 Creating Perceptual Hash for each feature
2021-05-26 21:55:36,491 Creating Perceptual Hash for each feature
2021-05-26 21:55:36,493 Mixing Output
2021-05-26 21:55:36,969 Checking if the 2 songs are opened
2021-05-26 21:55:36,969 Mixing the 2 songs together with 20.0 % of song1and 80.0 % of song2
2021-05-26 21:55:37,605 Creating Perceptual Hash for each feature
2021-05-26 21:55:37,615 Creating Perceptual Hash for each feature
2021-05-26 21:55:37,619 Creating Perceptual Hash for each feature
2021-05-26 21:55:37,621 Creating Perceptual Hash for each feature
2021-05-26 21:55:37,622 Mixing Output
2021-05-26 21:55:37,624 Checking if the 2 songs are opened
2021-05-26 21:55:37,624 Mixing the 2 songs together with 30.0 % of song1and 70.0 % of song2
2021-05-26 21:55:38,383 Creating Perceptual Hash for each feature
2021-05-26 21:55:38,397 Creating Perceptual Hash for each feature
2021-05-26 21:55:38,405 Creating Perceptual Hash for each feature
2021-05-26 21:55:38,409 Creating Perceptual Hash for each feature
2021-05-26 21:55:38,410 Mixing Output
2021-05-26 21:55:38,410 Checking if the 2 songs are opened
2021-05-26 21:55:38,410 Mixing the 2 songs together with 40.0 % of song1and 60.0 % of song2
2021-05-26 21:55:39,176 Creating Perceptual Hash for each feature
2021-05-26 21:55:39,186 Creating Perceptual Hash for each feature
2021-05-26 21:55:39,189 Creating Perceptual Hash for each feature
2021-05-26 21:55:39,195 Creating Perceptual Hash for each feature
2021-05-26 21:55:39,197 Mixing Output
